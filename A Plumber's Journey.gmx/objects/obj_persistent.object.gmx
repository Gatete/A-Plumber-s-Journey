<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_endmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A Plumber's Journey persistent object

//Initialize global variables
scr_initglobals();

//How the screen is fading
//0: From black
//1: To black
mode = 0;

//How much the screen is faded
done = 0;

//Screenshot of the game, if it exists
back = -1;

//Display FPS values
showfps = false;

//Message to display
message = "";

//Game width/height
global.gw = 384;
global.gh = 216;

//Shader variables
scr_pixel_init();
scr_shockwave_init();

//Set the epsilon value for floating point numbers
math_set_epsilon(0.00001);

//Set a alternative key bind for the 'Space' key.
keyboard_set_map(ord('C'),vk_space);

//Set a alternative key bind for the 'Shift' key.
keyboard_set_map(ord('X'),vk_shift);

//Set a alternative key bind for the 'Control' key.
keyboard_set_map(ord('Z'),vk_control);

//Handles the font to be used on the HUD
global.font_hud = font_add_sprite_ext(spr_font,"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-+.!*",0,0);

//Disable application surface automatic drawing
application_surface_draw_enable(0)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nograv</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disable shockwave

shock_enabled = false;
var_time_var = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delay applying settings

//Apply fullscreen
window_set_fullscreen(fullscreen);

//Apply filtering and VSync
event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to the eXcavator memorial room

room_goto(rm_eX);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset the configuration message

message = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center the window

window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate everything

//Deactivate everything
instance_deactivate_all(1);

//Make sure the level loader object is active
//instance_activate_object(obj_levelloader);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop fading to black

//Set mode to fade from black
mode = 0;

//Begin fading from black
done = 0;

//Activate everything
instance_activate_all();

//Resume particle effects
part_system_automatic_update(1,1);

//Delete the screenshot if it exists
if (background_exists(back))
    background_delete(back);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update camera

//Set the width / height of the camera.
view_wport[0] = global.gw;
view_hport[0] = global.gh;
view_wview[0] = global.gw;
view_hview[0] = global.gh;

//Enable views
view_enabled = true;

//Make view 0 visible
if (view_visible[0] == false)
    view_visible[0] = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with various game preferences.

//Update FMOD
FMODUpdate();

//Update shockwave shader
scr_shockwave_update();

//Prevent lives from going over 99
if (lives &gt; 128)
    lives = 128;
    
//Prevent score from going over 999999990
if (score &gt; 999999990)
    score = 999999990;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle all of the hot keys

//Quit the game when ALT+F4 are pressed.
if (keyboard_check_pressed(vk_f4))
    game_end();
    
//Restart the game when ALT+R are pressed.
else if (keyboard_check_pressed(ord('R'))) {

    //Reset all global variables
    scr_initglobals();
    
    //Stop FMOD and streams
    FMODAllStop();
    
    //Stop all audio
    audio_stop_all();

    //Go to title screen
    scr_return();
}

//Fullscreen (Handled by GM: Studio)
else if (keyboard_check_pressed(vk_enter)) {

    //Toggle between fullscreen or windowed mode.
    fullscreen = !fullscreen
    
    //Display message
    if (fullscreen)
        message = "FULLSCREEN ON";
    else
        message = "FULLSCREEN OFF";
        
    //Apply settings
    event_user(1);
}

//Toggles VSync
else if (keyboard_check_pressed(ord('V'))) {

    //Toggle vertical syncronization on / off.
    vsync = !vsync
    
    //Display message
    if (vsync)
        message = "VSYNC ON";
    else
        message = "VSYNC OFF";
        
    //Apply settings
    event_user(1);
}

//Toggle between 8-bit or 16-bit mode
else if (keyboard_check_pressed(ord('S'))) {

    //Toggle sound mode
    soundmode = !soundmode;
    
    //Play sound
    scr_playsound(snd_coin,snd_coin_8bit, 0, 0);
    
    //Display message
    if (soundmode)
        message = "8-BIT SOUND MODE ENABLED";
    else
        message = "8-BIT SOUND MODE DISABLED";
}

//Toggle FPS display
else if (keyboard_check_pressed(ord('F')))
    showfps = !showfps

//Set default window size
else if (keyboard_check_pressed(ord('1'))) {

    filter = 0;
    message = "1X WINDOW SIZE";
    event_user(1);
}

//Set 2x window size
else if (keyboard_check_pressed(ord('2'))) {

    filter = 1;
    message = "2X WINDOW SIZE";
    event_user(1);
}

//Set 3x window size
else if (keyboard_check_pressed(ord('3'))) {

    filter = 2
    message = "3X WINDOW SIZE";
    event_user(1);
}
    
//Reset the message
alarm[3] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a shockwave

//Enable shockwave
shock_enabled = true;

//Reset timer
var_time_var = 0;

//Disable shockwave
alarm[6] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the screen to be displayed

//Temporary variable
var s;

//Normal
if (filter = 0)
    s = 1;

//HQ2X
else if (filter = 1)
    s = 2;

//HQ4X
else if (filter = 2)
    s = 3;

//Reset display
display_reset(0,vsync);

//Set up the window
window_set_size(global.gw*s,global.gh*s);

//Set up the display
display_set_gui_size(global.gw*s,global.gh*s);

//Center the window
alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade the screen to black

//If this event was called manually
if (mode == 0) {

    //Take a screenshot
    back = background_create_from_surface(application_surface, 0, 0, view_wview[0], view_hview[0], 0, 0);
    
    //Pixel size
    size = 64;

    //Deactivate everything
    instance_deactivate_all(1);
}

//Start fading
done = 0;

//To black
mode = 1;

//Make sure it stops when its done
alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare to fade to black and reset all foregrounds

//Reset all foregrounds
for (i=1; i&lt;8; i++;) {

    global.foreground[i] = false;
}

//Fade to black
mode = 1;

//Set the pixel size
size = 0;

//Take a screenshot
back = background_create_from_surface(application_surface, 0, 0, view_wview[0], view_hview[0], 0, 0);

//Set alarm to execute when the next room starts
alarm[1] = 1;

//Stop rain sound if it's playing
if (audio_is_playing(snd_rain))
    audio_stop_sound(snd_rain);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade the screen to black, unless you just opened up the game

//Fade the screen
if (mode = 1)
    event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unload FMOD Sound System

//Free the system
FMODfree();
UnloadFMOD();

//Release control key if pressed
keyboard_key_release(vk_control);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Fullscreen + Window size + VSync Settings

//Open the file
var file = file_text_open_write("Settings.dat");

//Save fullscreen settings
file_text_write_string(file,string(fullscreen));
file_text_writeln(file);

//Save filtering settings
file_text_write_string(file,string(filter));
file_text_writeln(file);

//Save vsync settings
file_text_write_string(file,string(vsync));
file_text_writeln(file);

//Save sound mode settings
file_text_write_string(file,string(soundmode));

//Close the file
file_text_close(file);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load GMFMOD Simple

/*
// INSTRUCTIONS ABOUT ADDING MUSIC ON THE ENGINE.
//
// 1. Add the music file on the music folder under "Included Files".
//
// 2. Then add the global variable with the following data.
//
//      - Group
//          - 0: Title Music
//          - 1: Map Music
//          - 2: Event Music
//          - 3: Level Music
//
//      - Volume (I recommend setting it to 0.7 so you can hear the sound files included on the engine.)
//
//      - Loop Point (If the song does have a loop point, here's how you can get it. (I recommend the use of Audacity to do this.)
//          1. At the bottom of the screen, set the timing to samples.
//          2. Calculate the position of the start of the loop and the end of the loop, I recommend setting it in samples.
//          3. Once you're done with step 2, divide the start loop with the end loop. This will return the value you must use with FMODSoundSetLoopPoints().
//
//  3. To use it, just call the global variable you added before on "obj_levelmanager" and you're done.
*/

//Load FMOD
LoadFMOD();

//Initialize FMOD
FMODinit(100,0);

//Master volume
FMODMasterSetVolume(0.7);

//Stream variables.
global.stream = -1;
global.stream_pswitch = -1;
global.stream_starman = -1;

/*--- TITLE MUSIC ---*/

//Space reserved for title music

/*--- MAP ---*/

global.track_world1 = FMODSoundAdd("bgm/map/world1.ogg", 0, 0);
global.track_world2 = FMODSoundAdd("bgm/map/world2.ogg", 0, 0);
global.track_world3 = FMODSoundAdd("bgm/map/world3.ogg", 0, 0);
global.track_world4 = FMODSoundAdd("bgm/map/world4.ogg", 0, 0);
    
/*--- EVENT ---*/

//Flagpole (Valtteri - Flagpole)
global.track_flagpole = FMODSoundAdd("bgm/flagpole.ogg", 0, 0);
    FMODSoundSetGroup(global.track_flagpole, 2);

//Game Over (Super Mario 3D Land - Game Over)
global.track_gameover = FMODSoundAdd("bgm/gameover.ogg", 0, 0);
    FMODSoundSetGroup(global.track_gameover, 2);
    
//Miss (Super Mario 3D Land - Miss)
global.track_miss = FMODSoundAdd("bgm/miss.ogg", 0, 0);
    FMODSoundSetGroup(global.track_miss, 2);

/*--- LEVEL MUSIC ---*/

//Airship (Valtteri - SMB SMAS Airship)
global.track_airship = FMODSoundAdd("bgm/airship.ogg", 0, 0);
    FMODSoundSetGroup(global.track_airship, 3);
    FMODSoundSetLoopPoints(global.track_airship, 0.11418533157663592446201141853316, 1);
    
//Bonus (3 Game Loop thing - Rig!)
global.track_bonus = FMODSoundAdd("bgm/bonus.ogg", 0, 0);
    FMODSoundSetGroup(global.track_bonus, 3);

//Boss (Super Princess Peach - Boss fight!!!)
global.track_boss = FMODSoundAdd("bgm/boss.ogg", 0, 0);
    FMODSoundSetGroup(global.track_boss, 3);
    
//Castle (Fortune Street - Bowser's Castle
global.track_castle = FMODSoundAdd("bgm/castle.ogg", 0, 0);
    FMODSoundSetGroup(global.track_castle, 3);
    FMODSoundSetLoopPoints(global.track_castle,0.39640622399237480149489457610045,1);

//Ghost (Valtteri - SMB SMAS Ghost House)
global.track_ghost = FMODSoundAdd("bgm/ghost.ogg", 0, 0);
    FMODSoundSetGroup(global.track_ghost, 3);

//Invincible (Mario Sports Mix - Starman)
global.track_invincible = FMODSoundAdd("bgm/invincible.ogg", 0, 0);
    FMODSoundSetGroup(global.track_invincible, 3);

//Land (Valtteri - SMB Overworld)
global.track_land = FMODSoundAdd("bgm/land.ogg", 0, 0);
    FMODSoundSetGroup(global.track_land, 3);
    FMODSoundSetLoopPoints(global.track_land,0.0269849785407725,1);
    
//Land - Desert (Valtteri - SML Birabuto)
global.track_land_desert = FMODSoundAdd("bgm/land_desert.ogg", 0, 0);
    FMODSoundSetGroup(global.track_land_desert, 3);
    FMODSoundSetLoopPoints(global.track_land_desert, 0.08070541221440361393449743723395, 1);
    
//Land - Snow (QuickSilverBT - Snow Land Orchestrated)
global.track_land_snow = FMODSoundAdd("bgm/land_snow.ogg", 0, 0);
    FMODSoundSetGroup(global.track_land_snow, 3);

//Underworld (Super Smash Bros. Brawl - Underground SMB)
global.track_underworld = FMODSoundAdd("bgm/underworld.ogg", 0, 0);
    FMODSoundSetGroup(global.track_underworld, 3);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Fullscreen + Window size + VSync Settings

//If the 'settings.dat' file exist.
if (file_exists("Settings.dat")) {

    //Open the file
    var file = file_text_open_read("Settings.dat");

    //Set fullscreen mode based on the read value
    fullscreen = real(file_text_read_string(file));
    file_text_readln(file);

    //Set filtering mode based on the read value
    filter = real(file_text_read_string(file));
    file_text_readln(file);

    //Set vsync based on the read value
    vsync = real(file_text_read_string(file));
    file_text_readln(file);
    
    //Set the sound mode based on the read value
    soundmode = real(file_text_read_string(file));

    //Close the file
    file_text_close(file);
}
else {

    //Fullscreen is off by default
    fullscreen = 0;

    //Set the window to double of it's original size
    filter = 2;

    //VSync is off by default
    vsync = 0;
    
    //Sound mode is set to 16 bit by default
    soundmode = 0;
}

//Apply loaded settings
alarm[5] = 1;

//Play the coin sound at the splash screen
scr_playsound(snd_coin,snd_coin_8bit, 0, 0);

//Go to the title screen
alarm[4] = 200;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with the application surface, window size, and fading.

//Disable alpha blending
draw_enable_alphablend(0)

//Set the shockwave shader
if (shock_enabled) {

    shader_set(shd_shockwave);
    var_time_var += 0.03;
}

//Set the shader uniforms
shader_set_uniform_f(uni_time, var_time_var);
shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
shader_set_uniform_f(uni_shock_amplitude, var_shock_amplitude);
shader_set_uniform_f(uni_shock_refraction, var_shock_refraction );
shader_set_uniform_f(uni_shock_width, var_shock_width);

//Set the pixelate shader
if (done &lt; 1) {

    shader_set(shd_pixel);
    shader_set_uniform_f(pixel, global.gw, global.gh, size, size);
}

//No Filter
if (filter = 0)
    draw_surface(application_surface,0,0);

//2x Filtering 
else if (filter = 1)
    draw_surface_stretched(application_surface,0,0,global.gw*2,global.gh*2);

//3x Filtering
else if (filter = 2)
    draw_surface_stretched(application_surface,0,0,global.gw*3,global.gh*3);

//Reset the shader
shader_reset();

//Enable alpha blending
draw_enable_alphablend(1)

//Fades the screen to and from black
if (done &lt; 1) {

    //Increment fading
    done += 1/30;

    //Fade from black
    if (mode = 0) {
    
        draw_set_alpha(1-done);
        size -= 1.5;
    }

    //Fade to black
    else {
    
        draw_set_alpha(done);
        size += 1.5;
    }

    //Draw the fade
    draw_set_color(c_black)
    draw_rectangle(0,0,5000,5000,0)
    draw_set_alpha(1)
    draw_set_color(c_white)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display status message and draw the fade background

//Draws the screenshot shown when fading to black
if (background_exists(back)) {

    draw_enable_alphablend(0);
    draw_background(back,view_xview[0],view_yview[0]);
    draw_enable_alphablend(1);
}

//Set the font
draw_set_font(fnt_persistent);

//Align the font
draw_set_halign(fa_right);

//Display FPS
if (showfps) {

    //Display message
    if (message != "")
        draw_text_colour_shadowed(view_xview[0]+382,view_yview[0]+206,string(message),c_black,c_white,1,1,0.7,1);
        
    //Otherwise, display FPS.
    else
        draw_text_colour_shadowed(view_xview[0]+382,view_yview[0]+206,"FPS: " + string_format(fps,2,true),c_black,c_white,1,1,0.7,1);
}
else if (message != "")
    draw_text_colour_shadowed(view_xview[0]+382,view_yview[0]+206,string(message),c_black,c_white,1,1,0.7,1);
    
//Re-align the font
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
