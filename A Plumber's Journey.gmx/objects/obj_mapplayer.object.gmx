<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_playermask_map</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///It's the player on the map

//Default variable
mapmusic = noone;

//If the player has been on the world map in the past
if (ds_map_exists(global.worldmap,"returnx")) {

    //Load Mario's previous position
    x = ds_map_find_value(global.worldmap,"mapx");
    y = ds_map_find_value(global.worldmap,"mapy");
}

//If this is Mario's first time on the world map
else {

    //Set the return variables to the current location
    ds_map_add(global.worldmap,"returnx",x)
    ds_map_add(global.worldmap,"returny",y)
}

//Load the return variables
returnx = ds_map_find_value(global.worldmap,"returnx")
returny = ds_map_find_value(global.worldmap,"returny")

//State variable
ready = 0;

//Scale
scale = 1;

//Facing direction
xscale = 1;

//Current music
stream = -1;

//Current volume
volume = 1;

//Reset keys
global.key = 0;
global.keyget = ds_map_create();

//Reset time variable
global.time = 0;

//Did the player clear a level
if (global.clear &gt; 0) {

    //If so, set the alarm that accounts for this
    alarm[2] = 30;

    //Set the correct state for this action
    ready = 1;
}

//Play music
alarm[3] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play the map music

//Set the music
switch (global.world) {

    case ("1"): mapmusic = global.track_world1; break;
    case ("2"): mapmusic = global.track_world2; break;
    case ("3"): mapmusic = global.track_world3; break;
    case ("4"): mapmusic = global.track_world4; break;
}

//Set up stream
if (FMODInstanceIsPlaying(stream)) {

    FMODInstanceStop(stream);
    stream = -1;
}
stream = FMODSoundLoop(mapmusic, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's victorious cleared level script!

//Find the id of the panel Mario is on
panel = collision_point(x,bbox_bottom,obj_panelparent,0,0)

//If there is a panel there (Why wouldn't there be?)
if (panel) {

    //If the panel has not been beaten yet.
    if (panel.beaten == 0) {
    
        //Call the panel's clear script if the level is beaten normally
        if (global.clear == 1)
            with (panel) event_user(2)
    }
    else
        alarm[1] = 1;
}
else
    alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///For after the level clear or death skid animations

//Reset the state
ready = 0;

//Set the new return values
returnx = x;
returny = y;

//Save Mario's current location
ds_map_replace(global.worldmap,"mapx",x);
ds_map_replace(global.worldmap,"mapy",y);

//Reset the clear global variable
global.clear = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DO NOT USE
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate the player

//If the player is not jumping
if (vspeed == 0) {

    //If the player is not moving
    if (hspeed == 0) {
    
        //Set the sprite
        sprite_index = scr_player_idle();
        
        //Do not animate
        image_speed = 0;
        image_index = 0;
    }
    
    //Otherwise, if it's moving
    else if (hspeed != 0) {
    
        //Set the sprite
        sprite_index = scr_player_walk();
        
        //Animate
        image_speed = 0.3;
    }
}
else {
    
    //Set the sprite
    sprite_index = scr_player_jump();
    
    //Do not animate
    image_speed = 0;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make invisible if moving down

if (visible) {

    if (vspeed &gt; 0) &amp;&amp; (y &gt; view_yview[0]+104) {
    
        //Play 'Enter stage' sound
        scr_playsound(snd_enterstage, snd_enterstage_8bit, 0, false);    
        
        //Trigger shockwave
        with (obj_persistent) {
        
            var_mouse_pos_x = other.x+8 - view_xview[0];
            var_mouse_pos_y = other.y+8 - view_yview[0];
            event_user(2);
        }
                        
        //Make it invisible
        visible = false;
        
        //Stop moving
        vspeed = 0;
        gravity = 0;
            
        //Stop stream
        FMODInstanceStop(stream);
        stream = -1;
    }
    
    //Scale down the player until he enters on a level.
    if (vspeed != 0) {
    
        scale -= 0.0125;
        if (scale &lt; 0.25)
            scale = 0.25;
    }
}

//Lower volume when entering a stage
if (vspeed &gt; 0) {

    volume -= 0.05;
    if (vspeed &gt; 0)
        FMODInstanceSetVolume(stream, volume);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Map player logic

//If the player can move
if (ready == 0) {

    //Player movement
    if (speed == 0) {
    
        //Moving right
        if (keyboard_check_pressed(vk_right)) {
        
            //If there's a unlocked path at the right of the panel.
            mypath = collision_point(bbox_right+1,bbox_bottom,obj_mappath,1,0);
            if (mypath)
            &amp;&amp; (mypath.visible) {
                
                //Set the horizontal speed
                hspeed = 3;
                
                //Set the facing direction
                xscale = 1;
            }
    
            //Otherwise, play a 'Bump' sound.
            else
                scr_playsound(snd_bump, snd_bump_8bit, 0, false);            
        }
        
        //Moving left
        else if (keyboard_check_pressed(vk_left)) {
        
            //If there's a unlocked path at the right of the panel.
            mypath = collision_point(bbox_left-1,bbox_bottom,obj_mappath,1,0);
            if (mypath)
            &amp;&amp; (mypath.visible) {
                
                //Set the horizontal speed
                hspeed = -3;
                
                //Set the facing direction
                xscale = -1;
            }
    
            //Otherwise, play a 'Bump' sound.
            else
                scr_playsound(snd_bump, snd_bump_8bit, 0, false);        
        }
        
        //Enter the level when 'Shift' is pressed
        panel = collision_point(x,bbox_bottom,obj_panelparent,0,0);
        
        //If the player is on a panel
        if (panel) {
        
            //If 'Shift' is pressed and the panel can be triggered.
            if (keyboard_check_pressed(vk_shift))
            &amp;&amp; (panel.ready == 0) {
            
                //Prepare to leave
                event_user(0);
                
                //Go where the panel takes you
                with (panel) event_user(3);
            }
            
            //Developer command only
            else if (keyboard_check_pressed(vk_enter))
            &amp;&amp; (panel.ready == 0) {
            
                //Open the panel
                with (panel) {
                
                    //If the level is not beaten
                    if (beaten == 0) {
                    
                        //Beat it!
                        beaten = 1;
                    
                        //Remember it!
                        ds_map_replace(global.worldmap,string(id),"W");
                    
                        //Show it!
                        event_user(1);
                    }
                }
            }      
        }
        
        //Change between Mario or Luigi
        if (keyboard_check_pressed(vk_space)) {
        
            //Play 'Move' sound
            scr_playsound(snd_move, snd_move_8bit, 0, false);
            
            //Replace player
            global.player = !global.player;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_panelparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop by in the panel

if (other.visible) {

    if ((hspeed != 0) &amp;&amp; (x == other.x)) {
    
        //Snap in position
        move_snap(8,1);
        
        //Stop moving
        speed = 0;
    }
        
    //Get the name and print it
    if (hspeed == 0)
        obj_maphud.levelname = other.name;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mappanel_secret1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop by in the panel

if (other.sprite_index != spr_mappanel) {

    if ((hspeed != 0) &amp;&amp; (x == other.x)) {
    
        //Snap in position
        move_snap(8,1);
        
        //Stop moving
        speed = 0;
    }
    
    //Get the name and print it
    if (hspeed == 0)
        obj_maphud.levelname = other.name;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///What happens when the player enters a level

//Play 'Jump' sound
scr_playsound(snd_jump, snd_jump_8bit, 0, false);

//Save the player's current location
ds_map_replace(global.worldmap,"mapx",x)
ds_map_replace(global.worldmap,"mapy",y)

//Ready
ready = 1;

//Jump
vspeed = -5;
gravity = 0.15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check how many power stars are collected

for (var i=0; i&lt;99; i++;) {

    if (global.powerstar[i] &gt; 0)
        global.startally++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

draw_sprite_ext(sprite_index,-1,round(x),round(y)+1,scale*sign(xscale),scale,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
