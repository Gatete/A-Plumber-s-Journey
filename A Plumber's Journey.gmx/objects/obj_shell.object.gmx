<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_shell</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_enemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A shell

//How vulnerable is this enemy to various items?
hardness = 0;

//How vulnerable is this enemy to Mario?
stomp = 0;

//Facing direction
xscale = 1;

//Set the death sprite
deathsprite = spr_koopa_dead;

//Palette
palette = spr_palette_koopa;

//Scoregrade
scoregrade = 1;

//Do not animate
image_speed = 0;

//Sprite check
alarm[0] = 1;

//Shake
alarm[1] = 540;

//Wake up
alarm[2] = 600;

//How many enemies did this shell kill?
combo = 0;

//Make it able to be kicked
ready = false;

//Make it able to harm the player
harmmario = false;

//Make it able to shake before it wakes up.
offset = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nograv</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wake up

//If the shell is not moving.
if (!ready) {

    //Sprite check
    switch (sprite_index) {
    
        //Green koopa
        case (spr_shell):
        case (spr_shell_down): {
        
            //Create a green koopa
            instance_create(x,y,obj_koopa);
            instance_destroy();
        } break;
        
        //Red koopa
        case (spr_shell_red):
        case (spr_shell_red_down): {
        
            //Create a green koopa
            instance_create(x,y,obj_koopa_red);
            instance_destroy();
        } break;
        
        //Buzzy Beetle
        case (spr_shell_buzzy):
        case (spr_shell_buzzy_down): {
        
            //Create a green koopa
            instance_create(x,y,obj_buzzybeetle);
            instance_destroy();
        } break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake

if (!ready) {

    //Repeat the process.
    alarm[1] = 2;
    
    //Shake it.
    if (offset != 1)
        offset = 1;
    else
        offset = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check sprite

switch (sprite_index) {

    //Green Koopa
    case (spr_shell):
    case (spr_shell_down): {
    
        //Set the death sprite
        deathsprite = spr_koopa_dead;
        
        //Set the palette
        palette = spr_palette_koopa;
    } break;
    
    //Red Koopa
    case (spr_shell_red):
    case (spr_shell_red_down): {
    
        //Set the death sprite
        deathsprite = spr_koopa_red_dead;
        
        //Set the palette
        palette = noone;
    } break;
    
    //Buzzy Beetle
    case (spr_shell_buzzy):
    case (spr_shell_buzzy_down): {
    
        //Set the death sprite
        deathsprite = spr_buzzybeetle_dead;
        
        //Set the hardness
        hardness = 1;
        
        //Set the palette
        palette = noone;
    } break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shell logic

//Wall collisions
event_user(3);

//Floor collisions
event_user(4);

//Slowdown the shell when not in a collision when kicked
if (ready) {

    //Update facing direction
    xscale = sign(hspeed);
    
    //Update moving speed
    if (vspeed == 0)
        hspeed = 3*sign(hspeed);
    else
        hspeed = 1*sign(hspeed);
    
    //Make the shell able to hurt the player
    if (harmmario == 0)
    &amp;&amp; (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_player,0,1))
        harmmario = 1;
}

//Stop the shell when in a collision when not kicked.
else {

    //If not moving up or down.
    if (vspeed == 0) {
    
        //Reduce the player speed until he stops.
        hspeed = max(0,abs(hspeed)-0.1)*sign(hspeed);
        
        //Set up horizontal speed to 0 when hspeed hits 0.1.
        if ((hspeed &lt; 0.1) &amp;&amp; (hspeed &gt; -0.1))             
            hspeed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemyparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill it with shells

//If moving
if (ready) {
    
    //Give points.
    with (instance_create(x,y,obj_points)) {
    
        if (other.combo &lt; 8) {
        
            switch (other.combo) {
            
                case (0): scr_playsound(snd_kick, snd_kick_8bit, 0, false); break; //400
                case (1): scr_playsound(snd_kick2, snd_kick_8bit, 0, false); break; //500
                case (2): scr_playsound(snd_kick3, snd_kick_8bit, 0, false); break; //800
                case (3): scr_playsound(snd_kick4, snd_kick_8bit, 0, false); break; //1000
                case (4): scr_playsound(snd_kick5, snd_kick_8bit, 0, false); break; //2000
                case (5): scr_playsound(snd_kick6, snd_kick_8bit, 0, false); break; //4000
                case (6): scr_playsound(snd_kick7, snd_kick_8bit, 0, false); break; //5000
                case (7): scr_playsound(snd_kick7, snd_kick_8bit, 0, false); break; //8000
            }
            
            //Give points
            event_user(2+other.combo);
        }
        else {
        
            //Play a sound
            scr_playsound(snd_kick7, snd_kick_8bit, 0, false);
        
            //Give a 1-UP or 10.000 points
            event_user(11);
        }
    }
    
    //Increment combo
    combo++;
    
    //Kill enemy
    with (other) event_user(0);
    
    //Create spin thump
    instance_create(round(bbox_left+bbox_right)/2-8,round(bbox_top+bbox_bottom)/2-8,obj_shellthump);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player stomp script

//Exit event if player is under the effects of the starman.
if (instance_exists(obj_invincibility))
exit;

//If the shell is not moving
if (ready == 0) {

    //Play a sound.
    scr_playsound(snd_kick, snd_kick_8bit, 0, false);
    
    //Kick it.
    ready = 1;
    
    //Stop shaking and deny wake.
    if (offset != 0) {
    
        offset = 0;
        alarm[0] = -1;
        alarm[1] = -1;
    }
    
    //Animate it.
    image_speed = 0.3;

    //Set the horizontal speed.
    if (other.x &lt; x)
        hspeed = 2.75;
    else
        hspeed = -2.75;
}
else if (harmmario == 1) {

    if (stomp != -1)
    &amp;&amp; (other.invulnerable != -1) {
    
        //If the player is above the enemy and it's moving down.
        if (other.bbox_bottom &lt; bbox_top-vspeed+5) {
        
            //Stomp sequence
            if (stomp == 0) {
            
                //Play 'Stomp' sound
                scr_playsound(snd_stomp, snd_swim_8bit, 0, false);            
                
                //Prevent enemies from getting double stomped
                if (vspeed &lt; 0) {
                
                    y = yprevious;
                    if (other.vspeed &gt; 0)
                        other.y = other.yprevious;
                }
                
                //Make player bounce
                with (other) event_user(1);
                            
                //Points
                with (instance_create(round(bbox_left+bbox_right)/2-8,round(y),obj_points)) {
                
                    if (obj_player.combo &lt; 10)
                        event_user(0+obj_player.combo);
                    else
                        event_user(11);
                }
                obj_player.combo++;
                
                //Spin thump
                with (instance_create(other.x,other.bbox_bottom-8,obj_smoke)) {
                
                    sprite_index = spr_spinthump;
                    image_speed = 0.3;
                }
                
                //Stomp the enemy
                event_user(1);
            }
        }
        
        //Otherwise, hurt the player
        else
            with (other) event_user(0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop the shell and turn upside down if needed

//Create shell
imdead = instance_create(x,y-2,obj_shell);

//Set sprite
switch (sprite_index) {

    case (spr_shell): { //Green Koopa shell
    
        imdead.sprite_index = spr_shell_down;
    } break;
    case (spr_shell_red): { //Red Koopa shell
    
        imdead.sprite_index = spr_shell_red_down;
    } break;
    case (spr_shell_buzzy): { //Buzzy Beetle shell
    
        imdead.sprite_index = spr_shell_buzzy_down;
    } break;
    
    //Do not change
    default: imdead.sprite_index = sprite_index;
}

//Set vertical speed
imdead.vspeed = -6;

//Set horizontal speed
if (bbox_left+bbox_right/2 &gt; other.bbox_left+other.bbox_right/2) {

    imdead.hspeed = 0.5;
    imdead.xscale = 1;    
}
else {

    imdead.hspeed = -0.5;
    imdead.xscale = -1;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default floor / ceiling collisions

//When moving down
if (vspeed &gt; 0) {

    //Check for a semisolid below
    var semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+vspeed,obj_semisolid,0,0);

    //Handle semisolid collisions
    if (semisolid)
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5) {
    
        //Snap vertically
        y = semisolid.bbox_top-16;
    }

    //Cap fall speed
    if (vspeed &gt; 4)
        vspeed = 4;
}

//Check for floor objects
if ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_semisolid,0,0))
&amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-4,obj_semisolid,0,0))) {

    //No gravity
    gravity = 0
    
    //If moving down
    if (vspeed &gt; 0) {
    
        //If the shell has not been kicked.
        if (ready == 0) {
        
            //Stop vertical movement if moving down.
            if (vspeed &gt; 0.5)
                vspeed = -vspeed/1.5;
            else
                vspeed = 0;
        }
        else {
        
            vspeed = 0;
        }
    }
}
else
    gravity = 0.3;

//Ceiling check
if ((vspeed &lt; 0) &amp;&amp; (collision_rectangle(bbox_left+1,bbox_top-1,bbox_right-1,bbox_top-1,obj_solid,1,0))) {

    //Prevent getting embed on a ceiling.
    while (collision_rectangle(bbox_left+1,bbox_top,bbox_right-1,bbox_top,obj_solid,1,0))
        y++;
        
    //Stop vertical movement.
    vspeed = 0;
}

//Destroy when it falls out of the level
if (bbox_top &gt; room_height)
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default wall collision

if ((hspeed &lt; 0) &amp;&amp; (collision_rectangle(bbox_left-hspeed,bbox_top+4,bbox_left,bbox_bottom-4,obj_solid,1,0)))
|| ((hspeed &gt; 0) &amp;&amp; (collision_rectangle(bbox_right,bbox_top+4,bbox_right+hspeed,bbox_bottom-4,obj_solid,1,0))) {

    //Reverse horizontal speed
    hspeed = -hspeed;
    
    //Play bump sound when inside view
    if (!outside_view()) {
    
        scr_playsound(snd_bump, snd_bump_8bit, 0, false);
    }

    //Bump blocks
    instance_create(x,y,obj_blockbumper);

    //Shell bounce effects
    instance_create(x+xscale+8*sign(xscale),y,obj_shellthump);
    
    //Prevent getting embed on walls
    while (collision_rectangle(bbox_left,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,0,0))
        x++;
    while (collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,0,0))
        x--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop the shell

with (instance_create(x,y,obj_shell)) {

    //Set the sprite
    sprite_index = other.sprite_index;
    
    //Set the same scale
    xscale = other.xscale;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the shell

//Set the shader
if (palette != noone) {

    scr_pal_swap_set(palette,global.skin);
}

//Draw
draw_sprite_ext(sprite_index,-1,round(x)+offset,round(y)+1,xscale,1,image_angle,c_white,1);
    
//Reset the shader
if (palette != noone)
    shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
