<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_endmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manages the level, required for all levels.

/*
//  This object uses creation code!
//
//  levelmusic  =   Music of the level (Check 'obj_persistent' game start event for a full list of songs.)
//  leveltime   =   Time required to complete the level, leave blank for no time.
//  scroll_y    =   Lock camera when Mario is on ground
*/

//Default variables
levelmusic = noone;
leveltime = 0;
scroll_y = 0;

//Depth
depth = 1000000;

//Play music
alarm[0] = 2;

//Barrier
barrier = 1;
alarm[6] = 3;

//Foregrounds
alarm[5] = 1;

//P-Switch trigger
switchon = 0;

//Enable disable music
musicdisable = 0;

//Target object
if (instance_exists(obj_player)) {

    x = obj_player.x;
    y = obj_player.y;
    target_x = obj_player.x;
    target_y = obj_player.y;
}
else if (instance_exists(obj_player_warp)) {

    x = obj_player_warp.x;
    y = obj_player_warp.y;
    target_x = obj_player_warp.x;
    target_y = obj_player_warp.y;
}
else if (instance_exists(obj_player_climb)) {

    x = obj_player_climb.x;
    y = obj_player_climb.y;
    target_x = obj_player_climb.x;
    target_y = obj_player_climb.y;
}

//Create HUD object
instance_create(0,0,obj_hud);

//Set the object to follow.
view_object[0] = obj_levelmanager;

//Handles background pauses
for (i=0; i&lt;8; i++;)
    hsp[i] = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nograv</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warn the player that the P-Switch effect is running out

switchon = 2;
audio_play_sound(snd_timer_end, 0, false);
if (audio_is_playing(snd_timer))
    audio_stop_sound(snd_timer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enforce horizontal barriers

barrier = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle foregrounds

//Temporary variable
var i = 1;

//For all backgrounds
repeat (7) {

    //If the background is set to be drawn in front
    if (global.foreground[i]) {
    
        //Create a foreground object
        layer = instance_create(0,0,obj_foreground);
        layer.index = i;
        layer.offset = 1+(0.2*i);
    }
    
    //Turn backgrounds invisible
    background_visible[i] = 0;
    
    //Next background
    i++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill the player

//Kill the player
if (instance_exists(obj_player)) {

    //Reset the timer
    global.time = 0;
    
    //Destroy the player
    instance_create(obj_player.x,obj_player.y,obj_player_dead);
    with (obj_player) instance_destroy();
}
else
    alarm[4] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play 'Hurry up' sound

if (!audio_is_playing(snd_hurry))
&amp;&amp; (!audio_is_playing(snd_hurry_8bit)) {

    if (!FMODGroupGetPaused(3)) {
    
        //Play 'Hurry up' sound.
        scr_playsound(snd_hurry, snd_hurry_8bit, 0, false);
        
        //Pause group 3 music
        FMODGroupSetPaused(3,1);
        
        //Resume
        alarm[3] = 120;
    }
    else
        FMODGroupSetPaused(3,0);
}
else
    alarm[3] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrease time

//If the player object does exist
if (instance_exists(obj_player)) {

    //If there's time left
    if (global.time &gt; 0) {
    
        //Decrease
        global.time--;
        
        //Decrease again after a second
        alarm[2] = 50;
        
        //Play the hurry up sound when 100 seconds are left
        if (global.time == 101)
            alarm[3] = 50;
            
        //Kill the player object when time hits 0
        else if (global.time == 1)
            alarm[4] = 50;
    }
}
else {

    alarm[2] = 1;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop music

//Stop music
FMODInstanceStop(global.stream);

//Reset stream
global.stream = -1;

//Do not remember music
global.music = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play music

//If neither P-Switch or Starman is playing.
if (!FMODInstanceIsPlaying(global.stream_pswitch))
&amp;&amp; (!FMODInstanceIsPlaying(global.stream_starman)) {

    //If music is disabled, exit the event.
    if (musicdisable)
    exit;
    
    //If the music is not the same as the music from the previous area.
    if (levelmusic != global.music) {
    
        //Stop previous stream
        if (FMODInstanceIsPlaying(global.stream)) {
        
            FMODInstanceStop(global.stream);
            global.stream = -1;
        }
        
        //Play new stream
        global.stream = FMODSoundLoop(levelmusic, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with music pitch

//If the level does have time left.
if (global.time &gt; 0) {

    //Set all music at a higher speed if time is running out.
    if (global.time &lt; 101) {
    
        //Set the pitch for the pswitch theme if it's playing.
        if (FMODInstanceIsPlaying(global.stream_pswitch))     
            FMODGroupSetPitch(3,1);    
        else
            FMODGroupSetPitch(3,1.25);            
    }
    
    //Otherwise, set all music speed to default.
    else    
        FMODGroupSetPitch(3,1);      
}

//Otherwise, if the level does NOT have time left.
else
    FMODGroupSetPitch(3,1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with various game logic stuff

//Follow the player object if it exists.
if (instance_exists(obj_player)) {
        
    //Prevent the player from going outside the view
    if (!barrier) {
    
        //If the player moves off the left side of the screen.
        if (obj_player.x &lt; view_xview[0]+5) {
        
            //Snap the player to the left side of the screen.
            obj_player.x = view_xview[0]+5;
            
            //Stop the player's horizontal movement.
            if (obj_player.hspeed &lt; 0)
                obj_player.hspeed = 0;
        }
        
        //Otherwise, if the player moves off the right side of the screen.
        else if (obj_player.x &gt; view_xview[0]+view_wview[0]-5) {
        
            //Snap the player to the right side of the screen.
            obj_player.x = view_xview[0]+view_wview[0]-5;
            
            //Stop the player's horizontal movement.
            if (obj_player.hspeed &gt; 0)
                obj_player.hspeed = 0;
        }
    }
    
    //Follow the player
    target_x = (x+obj_player.x)/2;
    if (!scroll_y) {
    
        if ((obj_player.y &lt; view_yview[0]+view_hview[0]/2) &amp;&amp; (obj_player.state != 2))
        || (obj_player.y &gt; view_yview[0]+view_hview[0]/2)
            target_y = (y+obj_player.y)/2;
    }
    else
        target_y = (y+obj_player.y)/2;
}

//Follow the player object if it exists and it's warping.
else if (instance_exists(obj_player_warp)) {

    target_x = (x+obj_player_warp.x)/2;
    target_y = (y+obj_player_warp.y)/2; 
}

//Follow the player object if it exists and it's climbing a vine
else if (instance_exists(obj_player_climb)) {

    target_x = (x+obj_player_climb.x)/2;
    target_y = (y+obj_player_climb.y)/2;
}

//Follow the player object if it exists and it's heading to the flagpole.
else if (instance_exists(obj_player_goal)) {

    target_x = (x+obj_player_goal.x)/2;
    target_y = (y+obj_player_goal.y)/2;
}

//Otherwise, cancel the target
else {

    target_x = x;
    target_y = y;
}

//Camera post
x = lerp(x, target_x, 0.1);
y = lerp(y, target_y, 0.2);

//Get a extra life when 100 coins are collected
if (global.coins &gt; 99) {

    //Play '1-Up' sound
    scr_playsound(snd_1up, snd_1up_8bit, 0, false);
    
    //Get a life
    lives++;
    
    //Restart coin counter
    global.coins -= 100;
}

//Disable P-Switch effects.
if (switchon == 2) {

    if (!audio_is_playing(snd_timer_end)) {
    
        //Disable P-Switches
        switchon = 0;
    
        //Turn everything to normal.
        scr_pswitch_deactivate();
    }
}

//Deactivate things that have the following parents.
instance_deactivate_object(obj_deactenemyparent);
instance_deactivate_object(obj_deactivateparent);

//Activate things that are on screen.
instance_activate_region(view_xview[0]-32,view_yview[0]-32,view_wview[0]+64,view_hview[0]+64,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disable music

//Disable music on the level
musicdisable = true;

//Stop music
alarm[1] = 1;

//Stop starman music instance
FMODInstanceStop(global.stream_starman);
global.stream_starman = -1;

//Stop pswitch music instance
FMODInstanceStop(global.stream_pswitch);
global.stream_pswitch = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resume all backgrounds

for (i=0; i&lt;8; i++;) {

    background_hspeed[i] = hsp[i];
    hsp[i] = 0;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause all backgrounds

for (i=0; i&lt;8; i++;) {

    hsp[i] = background_hspeed[i];
    background_hspeed[i] = 0;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy all player objects

with (obj_player) instance_destroy();
with (obj_player_warp) instance_destroy();
with (obj_player_climb) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remember previous music and reset level skin

//Remember previous music if neither of the pswitch or starman theme are playing.
if (FMODInstanceIsPlaying(global.stream))
    global.music = levelmusic;

else {

    //Do not remember music
    global.music = 0;    
    
    //Stop P-Switch theme if it's playing.
    if (FMODInstanceIsPlaying(global.stream_pswitch)) {
    
        FMODInstanceStop(global.stream_pswitch);
        global.stream_pswitch = -1;
    }
    
    //Otherwise, if the starman theme is playing, stop it.
    else if (FMODInstanceIsPlaying(global.stream_starman)) {
    
        FMODInstanceStop(global.stream_starman);
        global.stream_starman = -1;
    }
}

//Reset level skin
global.skin = 0;

//Stop all sounds
audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles room warping, music and timer.

//Set up the time for the level.
if (leveltime &gt; 0) { //If the timer has been set.

    //If the global time for the level is equal to 0.
    if (global.time = 0) {
    
        global.time = leveltime;
        alarm[2] = 50;
    }
    
    //Otherwise, if the time has been set before.
    else if (global.time &gt; 0)
        alarm[2] = 50;
}

//If the player came from another room.
if (global.postchange != -1) {

    //Destroy all player objects
    event_user(0);
    
    //Create the appropiate player object at the desired location.
    switch (global.postchange) {
    
        //Mario
        case (0): {
        
            myplayer = instance_create(global.postx,global.posty,obj_player);             
        } break;
        
        //Warp Mario
        case (1): {
        
            myplayer = instance_create(global.postx,global.posty,obj_player_warp);
        } break;
        
        //Climb Mario
        case (2): {
        
            myplayer = instance_create(global.postx,global.posty,obj_player_climb);
        } break;
    }
    
    //Snap the camera to this object
    x = myplayer.x;
    y = myplayer.y;
    target_x = myplayer.x;
    target_y = myplayer.y;  
    
    //Make Mario able to warp between rooms.
    global.postchange = -1;
}
else {

    //Move to the latest checkpoint if it exists.
    if (instance_exists(global.checkpoint)) {
    
        //Destroy all player objects
        event_user(0);
    
        //Create a new Mario at the desired location
        myplayer = instance_create(global.checkpoint.x+8,global.checkpoint.bbox_bottom-16,obj_player);
    
        //Snap the camera to this object
        x = myplayer.x;
        y = myplayer.y;
        target_x = myplayer.x;
        target_y = myplayer.y;    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with parallax backgrounds.

for (var i=1; i&lt;8; i++;) {

    //If the background is NOT a foreground.
    if (background_foreground[i] == false) {
    
        if ((i &gt; 0) &amp;&amp; (background_index[i] &gt; -1))
            draw_background_tiled_general_ext(background_index[i],view_xview[0]/(1+(0.2*i))+(background_x[i]+background_hspeed[i]),background_y[i],1,1,0,background_blend[i],background_alpha[i],background_htiled[i],background_vtiled[i]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause the game.

//Do not pause if ALT key is pressed.
if (keyboard_check(vk_alt))
exit;

//If the player does exist, pause
if (instance_exists(obj_player))
    instance_create(0,0,obj_pause);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
