<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_playermask_big</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///It's a me, the player object.

//Handle the player's current state.
//0: Idle
//1: Walk
//2: Jump
//3: Climb
state = 0;
statedelay = 0;

//Handle the player's facing direction
//1: Right
//-1: Left
xscale = 1;

//Handle the player's direction when stuck on a solid
//1: Right
//-1: Left
direct = 1;

//Allow the player to grab a beanstalk
canhang = 0;

//Allow the player to turn when climbing a beanstalk
canturn = 0;

//Handle the player's variable jumping
jumping = 0;

//Makes the player swim when on contact with a water surface
swimming = false;

//Makes the player able to crouch down
duck = false;

//Makes Mario able or not able to move
move = false;

//Makes the player invulnerable to all hazards
invulnerable = false;

//Disable the player controls
disablecontrol = false;

//Checks if Mario is stuck on a solid surface.
inwall = false;

//Check if Mario has been launched with a green trampoline
inair = false;

//Displays Mario's shooting pose when firing a projectile
firing = 0;

//How many consecutive stomps has the player made?
combo = 0;

//Handle the player's flashing animation
isflashing = 0;

//Handle the player's flashing effect
alarm[3] = 1;

//Handle the player's particle effects
alarm[4] = 1;

//Create a bubble if the player is swimming
alarm[5] = 1;

//Handle Mario's palettes
pal_sprite = spr_palette_mario;
pal = 0;

//Manage following keys
scr_key_init();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nograv</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop these sound from playing

//Stop 'Skid' sound
audio_stop_sound(snd_skid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a bubble if the player is swimming.

/*
//Repeat
alarm[5] = 45+random_range(15,-15);

//If the player is swimming.
if (swimming)
    instance_create(x,bbox_top,obj_bubble);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle the player particle effects

//Make sure if the player is NOT moving vertically.
if (vspeed == 0) {

    //If the player is skidding
    if (skidnow) {
    
        alarm[4] = 4;
        with (instance_create(x,bbox_bottom,obj_smoke))
            sprite_index = spr_smoke_skid;
    }
    
    //Otherwise, if the above condition is NOT true.
    else    
        alarm[4] = 1;
}
else
    alarm[4] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle the player's flashing effect.

//Make Mario flash if he's under the effects of the starman.
if (instance_exists(obj_invincibility)) {

    //Make Mario flash.
    isflashing++;
    if (isflashing &gt; scr_pal_swap_get_pal_count(pal_sprite)-1)
        isflashing = 1;
    
    //Repeat the process.
    if (obj_invincibility.alarm[0] &gt; 120)
        alarm[3] = 1;
    else
        alarm[3] = 4;
}
else {

    isflashing = 0;
    alarm[3] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player able to climb a beanstalk again

canhang = 0;
canturn = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player blink when hit

//If the player is still invulnerable to all hazards
if (invulnerable) {

    //Repeat the process
    alarm[1] = 1;
    
    //Change alpha
    image_alpha = !image_alpha;
}

//Otherwise, set up default alpha value
else
    image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player vulnerable to all hazards

invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle the player's animation

//Decrease firing variable
firing--;

//If the player is crouched down.
if (duck) {

    //Set the sprite
    sprite_index = scr_player_idle();    
    
    //Do not animate
    image_speed = 0;
    image_index = 1;
    
    //Do not skid
    skidnow = 0;
    
    //Stop skid sound
    audio_stop_sound(snd_skid);
    
    //Set the mask
    mask_index = spr_playermask;
}

else {

    //If the player is shooting a fireball.
    if (global.powerup == cs_fire)
    &amp;&amp; (firing &gt; 0) 
    &amp;&amp; ((state != 1) &amp;&amp; (state != 3)) {
    
        //Set the sprite
        sprite_index = scr_player_idle();
        
        //Do not animate
        image_speed = 0;
        if (state = 0)
            image_index = 2;
        else if (state == 2)
            image_index = 3;
    }
    
    //Otherwise
    else {
    
        //If the player is not moving
        if (state == 0) {
            
            //Set the sprite
            sprite_index = scr_player_idle();
            
            //Do not animate
            image_speed = 0;
            image_index = 0;
        }
        
        //Otherwise, if the player is moving
        else if (state == 1) {
        
            //If the player's horizontal speed is lower than -0.1 and it's facing the opposite direction
            if (hspeed &lt; -0.1) 
            &amp;&amp; (xscale == 1)
            &amp;&amp; (swimming == false) 
            &amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,0,0)) {
            
                //Set the sprite
                sprite_index = scr_player_skid();
                
                //Do not animate
                image_speed = 0;
                image_index = 0;
            }
            
            //Otherwise, if the player's horizontal speed is greater than 0.1 and it's facing the opposite direction
            else if (hspeed &gt; 0.1)
            &amp;&amp; (xscale == -1)
            &amp;&amp; (swimming == false)
            &amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,0,0)) {
            
                //Set the sprite
                sprite_index = scr_player_skid();
                
                //Do not animate
                image_speed = 0;
                image_index = 0;
            }
            
            //Otherwise, perform default animation
            else {
            
                //Set the sprite
                sprite_index = scr_player_walk();
                
                //Animate
                if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,0,0))
                    image_speed = 0.065+abs(hspeed)/7.5;
                else
                    image_speed = 0.130+abs(hspeed)/7.5;                
            }
        }
        
        //Otherwise, if the player is jumping or swimming.
        else if (state == 2) {
        
            //If the player is NOT swimming
            if (!swimming) {
            
                //Set the sprite
                sprite_index = scr_player_jump();
                
                //Do not animate
                image_speed = 0;
                image_index = 0;
            }
            else {
            
                //If the player is moving up
                if (vspeed &lt; 0) {
                
                    //Set the sprite
                    sprite_index = scr_player_swim2();
                    
                    //Animate
                    image_speed = 0.15;
                }
                
                //Otherwise
                else {
                
                    //Set the sprite
                    sprite_index = scr_player_swim();
                    
                    //Animate
                    image_speed = 0.3;
                }
            }
        }
        
        //Otherwise, if the player is climbing.
        else if (state == 3) {
        
            //Set the sprite
            sprite_index = scr_player_climb();
            
            //Animate
            if (vspeed == 0) {
            
                image_speed = 0;
                image_index = 0;
            }
            else
                image_speed = 0.15;
        }    
        
        //Play a skid sound when Mario is turning directions.
        if (sprite_index == scr_player_skid()) {
        
            if (!skidnow) {
            
                //Prevent sound clipping
                skidnow = true;
            
                //Loop 'skid' sound.
                if (!obj_persistent.soundmode)
                    audio_play_sound(snd_skid, 0, 1);
            }
        }
        else {
        
            //Restart sound.
            skidnow = false;
            
            //Stop 'skid' sound.
            if (!obj_persistent.soundmode)
                audio_stop_sound(snd_skid);
        }
    }
        
    //Set the mask
    if (global.powerup == cs_small)
        mask_index = spr_playermask;
    else
        mask_index = spr_playermask_big;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle the player's physics, movement and palette

//Update keys
scr_key_update();

//Update the player's palette
event_user(2);

//Update the player's physics
event_user(3);

//If the player is NOT swimming
if (!swimming) {

    //If the player is NOT climbing
    if (state != 3) {
    
        //Perform main behaviour script
        event_user(4);
    }
    
    //Otherwise, if the player is climbing
    else {
    
        //Perform climb behaviour script
        event_user(5);
    }
}

//Otherwise, if the player is swimming
else {

    //Perform swim behaviour script
    event_user(6);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset values (When landing)

//Allow Mario to jump again.
jumping = 0;
    
//Reset combo counter if not sliding.
combo = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swim behaviour script

//Call uninitialized variables
var hspeedmax = 1;
var jumpstr = 3.4675;
var acc = 0.025;
var accskid = 0.05;
var dec = 0.007;
var grav = 0.03;

//Figure out Mario's state.
if (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_semisolid,0,0))
&amp;&amp; (vspeed &gt;= 0) {

    //Figure out if Mario is standing or walking
    if (hspeed == 0)
        state = 0;
    else
        state = 1;

    //Reset state delay
    statedelay = 0;
}

//Mario is jumping if there's no ground below him.
else {

    //Delay the change to the jump state
    if (statedelay &gt; 4)
        state = 2;
    else
        statedelay++;
}

//Make Mario unduck if jumping.
if ((state == 2) &amp;&amp; (duck))
    duck = false;

//Prevent Mario from swimming too fast.
if (vspeed &lt; -2) 
    vspeed = -2;
    
//Prevent Mario from diving too fast.
if (vspeed &gt; 4)
    vspeed = 4;

//Set up the maximum horizontal speed.
if (state == 2)
    hspeedmax = 2;
else
    hspeedmax = 0.5;

//Handle Mario movement.
if (!disablecontrol) &amp;&amp; (!inwall) { //If Mario's controls are not disabled.

    //If the player presses the 'Shift' key.
    if (keyboard_check_pressed(vk_shift)) {
    
        //Play 'Swim' sound       
        scr_playsound(snd_swim,snd_swim_8bit, 0, false);
    
        //Swim higher if the 'Up' key is pressed.
        if (keyboard_check(vk_up))
            vspeed -= 2;
        
        //Swim lower if the 'Down' key is pressed.
        else if (keyboard_check(vk_down))
            vspeed -= 0.5;
        
        //Otherwise
        else        
            vspeed -= 1.5;
            
        //Set the state
        state = 2;
            
        //Move Mario a few pixels upwards when on contact with a moving platform or a slope.
        var platform = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_semisolid,0,0);
        if (platform)
        &amp;&amp; (platform.vspeed &lt; 0)
            y -= 4;
    }
    
    //Handle horizontal movement.
    //If the player presses the 'Right' key and the 'Left' key is not held.
    if ((keyboard_check(vk_right)) &amp;&amp; (!keyboard_check(vk_left)) &amp;&amp; (!duck) ) {
        
        //Set the facing direction.
        xscale = 1;
        
        //If there's NOT a wall on the way.
        if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)) {
        
            //Set the horizontal speed.
            if (hspeed &gt;= 0) //If Mario's horizontal speed is equal/greater than 0.        
                hspeed += acc;
            
            //Otherwise, If Mario's horizontal speed is lower than 0.
            else         
                hspeed += acc*2;
        }
    }
    
    //If the player presses the 'Left' key and the 'Right' key is not held.
    else if ((keyboard_check(vk_left)) &amp;&amp; (!keyboard_check(vk_right)) &amp;&amp; (!duck)) {
        
        //Set the facing direction
        xscale = -1;
        
        //If there's NOT a wall on the way.
        if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)) {
        
            //Set the horizontal speed.
            if (hspeed &lt;= 0) //If Mario's horizontal speed is equal/lower than 0.        
                hspeed += -acc;
                
            //Otherwise, If Mario's horizontal speed is greater than 0. 
            else        
                hspeed += -acc*2;
        }      
    }
    
    //Otherwise, if neither of the 'Left' key or 'Right' key is not held.
    else if (vspeed == 0) { //If Mario is on the ground.
    
        //Reduce Mario's speed until he stops.
        hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
        
        //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
        if ((hspeed &lt; dec) &amp;&amp; (hspeed &gt; -dec))      
            hspeed = 0;     
    }
}

//Otherwise, If Mario's controls are disabled.
else if (disablecontrol) {

    //Reduce Mario's speed until he stops.
    hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
    
    //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
    if ((hspeed &lt; dec) &amp;&amp; (hspeed &gt; -dec))    
        hspeed = 0;        
}

//Prevent Mario from sliding too fast.
if (abs(hspeed) &gt; hspeedmax)
    hspeed = max(0,abs(hspeedmax)-0.05*2)*sign(hspeed);
    
//Apply gravity
if ((state == 2) || (statedelay &gt; 0))
    gravity = grav;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Climb behaviour script

//Temporary variable
var jumpstr = 3.4675;

//Make the player face left
if (keyboard_check(vk_right)) {

    //Set the facing direction
    xscale = -1;

    //Release the vine if the key has been held enough
    canturn++;
    if (canturn &gt; 19) {
    
        //Set the jumping state
        state = 2;
        
        //Disallow climbing
        alarm[2] = 12;        
        canhang = 2;
        
        //End variable jumping
        jumping = 2;
        
        //Set movement
        hspeed = -xscale*2;
        
        //Set the facing direction
        xscale = 1*sign(hspeed);
    }
}
else if (keyboard_check(vk_left))  {

    //Set the facing direction
    xscale = 1;

    //Release the vine if the key has been held enough.
    canturn++;
    if (canturn &gt; 19) {
    
        //Set the jumping state
        state = 2;
        
        //Disallow climbing
        alarm[2] = 12;        
        canhang = 2;
        
        //End variable jumping
        jumping = 2;
        
        //Set movement
        hspeed = -xscale*2;
        
        //Set the facing direction
        xscale = 1*sign(hspeed);
    }
}
else { //Reset hangout variable

    canturn = 0;
}

//Move up if 'Up' is held
if ((keyboard_check(vk_up)) &amp;&amp; (!keyboard_check(vk_down))) {

    if (!collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top-1,obj_climb,0,0))
        vspeed = 0;
    else {

        //Set the vertical speed
        vspeed = -1;
    }
}

//Move down if 'Down' is held
else if ((keyboard_check(vk_down)) &amp;&amp; (!keyboard_check(vk_up))) {

    //Set the vertical speed
    vspeed = 1;
}

//Otherwise, stop the player
else {

    //Stop vertical movement
    vspeed = 0;
}

//Make the player jump.
if (keyboard_check_pressed(vk_shift)) {

    //Play 'Jump' sound
    if (global.powerup == cs_small) {
    
        scr_playsound(snd_jump,snd_jump_8bit, 0, false);
    }
    else {
    
        scr_playsound(snd_jump,snd_jump_super_8bit, 0, false);
    }
    
    //Set the jumping state
    state = 2;
    
    //Disallow climbing
    alarm[2] = 12;
    canhang = 2;
    
    //End variable jumping
    jumping = 1;
        
    //Set movement
    vspeed = -jumpstr;
    hspeed = -xscale*2;
    
    //Move the player 8 pixels
    x -= 8*sign(xscale);     
    
    //Set the facing direction
    xscale = 1*sign(hspeed);
}

//Makes the player move down when there's not a climbable surface above
if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_climb,0,0)) {

    if (vspeed &lt; 0)
        vspeed = 0
    else {
    
        //Set the 'Jumping' phase
        state = 2;
                    
        //Disallow climbing
        alarm[2] = 12;
        canhang = 2;
                
        //Allow variable jumping
        jumping = 1;
        
        //Move the player 8 pixels
        x -= 8*sign(xscale);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main behaviour script

//Mario's physics
if (global.player == 0) {

    var hspeedmax = 1.35;
    var jumpstr = 3.4775;
    var acc = 0.05;
    var accskid = 0.15;
    var dec = 0.0375;
    var decskid = 0.072;
    var grav = 0.3625
    var grav_alt = 0.0625;
}
else { //Luigi's physics

    var hspeedmax = 1.25;
    var jumpstr = 3.6675;
    var acc = 0.05;
    var accskid = 0.15;
    var dec = 0.05;
    var decskid = 0.0175;
    var grav = 0.3625
    var grav_alt = 0.0625;    
}

//Figure out the player state.
if (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_semisolid,0,0))
&amp;&amp; (vspeed &gt;= 0) {

    //Figure out if the player is standing or walking
    if (hspeed == 0)
        state = 0;
    else
        state = 1;

    //Reset state delay
    statedelay = 0;
}

//the player is jumping if there's no ground below him.
else {

    //Delay the change to the jump state
    if (statedelay &gt; 4)
        state = 2;
    else
        statedelay++;
}

//Prevent the player from falling too fast.
if (vspeed &gt; 4)
    vspeed = 4;
    
//Set up the player maximum horizontal speed.
if (keyboard_check(vk_control)) { //If the 'Control' key is being held.
    
    if (global.player == 0)
        hspeedmax = 2.7;
    else
        hspeedmax = 2.5;
}

//Otherwise, do not reduce speed until the player makes contact with the ground.  
else {

    if (global.player == 0)
        hspeedmax = 1.35;
    else
        hspeedmax = 1.25;
}
    
//Cap the player horizontal speed when on ground.
if (state &lt; 2) {

    if (hspeed &gt; hspeedmax)
        hspeed -= acc;
    else if (hspeed &lt; -hspeedmax)
        hspeed += acc;
}

//Handle basic movements
if ((!disablecontrol) &amp;&amp; (!inwall)) { //If the player controls are not disabled.

    //Make the player able to jump when is on contact with the ground.
    if (keyboard_check_pressed(vk_shift))
    &amp;&amp; (jumping == 0)
    &amp;&amp; (vspeed == 0) 
    &amp;&amp; (state != 2) 
    &amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+2,obj_noteblock,0,0)) { //If the 'Shift' key is pressed and the player is not jumping.
    
        //Play 'Jump' sound
        if (global.powerup == cs_small) {
        
            scr_playsound(snd_jump,snd_jump_8bit, 0, false);
        }
        else {
        
            scr_playsound(snd_jump,snd_jump_super_8bit, 0, false);
        }
        
        //Make the player able to vary the jump.
        jumping = 1;
        
        //Switch to jump state
        state = 2;
        
        //Set the vertical speed.
        vspeed = -jumpstr+abs(hspeed)/7.5*-1;
        
        //Move the player a few pixels upwards when on contact with a moving platform or a slope.
        var platform = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_semisolid,0,0);
        if ((platform) &amp;&amp; (platform.vspeed &lt; 0))
            y -= 4;
    }
    
    //Make the player fall if the player releases the 'Shift' key.
    else if ((jumping == 1) &amp;&amp; (keyboard_check_released(vk_shift)))         
        jumping = 2;
    
    //Enable / Disable Movement.
    scr_toggle_movement();
    
    //Handle Horizontal Movement.
    //If the player holds the 'Right' key and the 'Left' key is not being held.
    if ((keyboard_check(vk_right)) &amp;&amp; (!keyboard_check(vk_left)) &amp;&amp; (move)) {
        
        //Set the facing direction.
        xscale = 1;
        
        //If there's not a wall on at the right.
        if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,0,0)) {
        
            //Check up the player horizontal speed
            if (hspeed &lt; hspeedmax) {
                            
                //Make the player move horizontally.
                if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,0,0)) { //If the player is overlapping a slippery surface.
                    
                    //If the player horizontal speed is equal/greater than 0.
                    if (hspeed &gt;= 0) {
                    
                        //Add 'acc' to hspeed.
                        hspeed += acc;
                    }
                    else { //Otherwise, if the player speed is lower than 0.
                    
                        //Add 'accskid' to hspeed;
                        hspeed += accskid;
                    }
                }
                else { //Otherwise, if the player is overlapping a slippery surface.
                
                    //If the player horizontal speed is equal/greater than 0.
                    if (hspeed &gt;= 0) {
                    
                        //Add 'acc' to hspeed
                        hspeed += acc/3;
                    }
                    else { //Otherwise, if the player speed is lower than 0.
                    
                        //Add 'accskid' to hspeed.
                        hspeed += accskid/3;
                    }                                              
                }
            }
        }
    }
    
    //If the player holds the 'Left' key and the 'Right' key is not being held.
    else if ((keyboard_check(vk_left)) &amp;&amp; (!keyboard_check(vk_right)) &amp;&amp; (move)) {
        
        //Set the facing direction.
        xscale = -1;
        
        //If there's not a wall at the left.
        if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,0,0)) {
        
            //Check up the player horizontal speed.
            if (hspeed &gt; -hspeedmax) {
                    
                //Make the player move horizontally.
                if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,0,0)) { //If the player is overlapping a slippery surface.
                    
                    //If the player horizontal speed is equal/lower than 0.
                    if (hspeed &lt;= 0) {
                        
                        //Add 'acc' to hspeed.
                        hspeed += -acc;
                    }
                    else { //Otherwise, if the player speed is greater than 0.
                    
                        //Add 'accskid' to hspeed;
                        hspeed += -accskid;
                    }
                }
                else { //Otherwise, if the player is overlapping a slippery surface.
                
                    //If the player horizontal speed is equal/lower than 0.
                    if (hspeed &lt;= 0) {
                    
                        //Add 'acc' to hspeed
                        hspeed += -acc/3;
                    }
                    else { //Otherwise, if the player speed is greater than 0.
                    
                        //Add 'accskid' to hspeed.
                        hspeed += -accskid/3;
                    }                                              
                }
            }
        }
    }
    
    //Otherwise, if the player is on contact with the ground.
    else if (vspeed == 0) { 
    
        //If the player is not overlapping a slippery surface.
        if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,0,0)) {
        
            //If the player is not crouched down.
            if (!duck) {
            
                //Reduce the player speed until he stops.
                hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
                
                //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
                if ((hspeed &lt; dec) &amp;&amp; (hspeed &gt; -dec))             
                    hspeed = 0;
            }
            else { //If the player is crouched down.
            
                //Reduce the player speed until he stops.
                hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
                
                //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
                if ((hspeed &lt; decskid) &amp;&amp; (hspeed &gt; -decskid))                
                    hspeed = 0;
            }
        }
        else { //Otherwise, if the player is overlapping a slippery surface.
        
            //Reduce the player speed until he stops.
            hspeed = max(0,abs(hspeed)-dec/8)*sign(hspeed);
            
            //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
            if ((hspeed &lt; dec/8) &amp;&amp; (hspeed &gt; -dec/8))          
                hspeed = 0;
        }
    }
}

//Otherwise, if the player controls are disabled and the player is on contact with the ground.
else if (vspeed == 0) { 
        
    //If the player is not overlapping a slippery surface.
    if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,0,0)) {
    
        //If the player is not crouched down.
        if (!duck) {
        
            //Reduce the player speed until he stops.
            hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
            
            //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
            if ((hspeed &lt; dec) &amp;&amp; (hspeed &gt; -dec))         
                hspeed = 0;
        }
        else { //If the player is crouched down.
        
            //Reduce the player speed until he stops.
            hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
            
            //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
            if ((hspeed &lt; decskid) &amp;&amp; (hspeed &gt; -decskid))        
                hspeed = 0;
        }
    }
    else { //Otherwise, if the player is overlapping a slippery surface.
    
        //Reduce the player speed until he stops.
        hspeed = max(0,abs(hspeed)-dec/8)*sign(hspeed);
        
        //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
        if ((hspeed &lt; dec/8) &amp;&amp; (hspeed &gt; -dec/8))   
            hspeed = 0;
    }
}

//If the player is jumping
if ((state == 2) || (statedelay &gt; 0)) {
    
    //Variable jumping
    if (vspeed &lt; -2) &amp;&amp; (jumping == 1) {
    
        //Use alternate gravity
        gravity = grav_alt;
    }   
    
    //Otherwise, use alternate gravity.     
    else {
    
        //Use default gravity
        gravity = grav;
        
        //End variable jumping if it never ends manually.
        if (jumping = 1)
            jumping = 2;
    }
}
    
//Check for a climbing object
var climb = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_climb,0,0);

//If there's a climbing object on place, make the player hold it.
if (climb)
&amp;&amp; (canhang == 0)
&amp;&amp; (state != 3) {

    //If there's a solid above.
    if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,0))
    exit;
    
    //Set climbing state
    state = 3;
    
    //Stop movement
    gravity = 0;
    speed = 0;
    
    //Makes the player climb
    canhang = 1;         
    
    //Snap into position           
    x = climb.x+8;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update the player's physics

//Floor collision
if (vspeed &gt;= 0) { //If the player is moving down.

    //Check for a semisolid object
    var semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1+vspeed,obj_semisolid,0,0);
    
    //If the semisolid exists and the player is above it.
    if (semisolid)
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5) {
    
        //Snap above the semisolid platform
        y = semisolid.y-16;
        
        //Stop vertical movement
        vspeed = 0;
        gravity = 0;
        
        //Reset values
        event_user(15);
    }
    
    //Left conveyor belt collision
    lconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_left,0,0);
    if ((lconv) &amp;&amp; (lconv.image_speed != 0)) {
    
        if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0))
            x--;
    }
    
    //Right conveyor belt collision
    rconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_right,0,0);
    if ((rconv) &amp;&amp; (rconv.image_speed != 0)) {
    
        if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0))
            x++;
    }
}

//If the player is bumping into a wall to the right.
if (hspeed &gt; 0) 
&amp;&amp; (collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,0,0)) {

    //Prevent the player from getting embed into the wall.
    while (collision_rectangle(x,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,0,0))
    &amp;&amp; (!collision_point(x,bbox_top+4,obj_solid,0,0))
        x--;
        
    //Stop horizontal movement
    hspeed = 0;
}

//Otherwise, if the player is bumping into a wall to the left.
else if (hspeed &lt; 0)
&amp;&amp; (collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,0,0)) {

    //Prevent the player from getting embed into the wall.
    while (collision_rectangle(bbox_left,bbox_top+4,x,bbox_bottom-1,obj_solid,0,0))
    &amp;&amp; (!collision_point(x,bbox_top+4,obj_solid,0,0))
        x++;
        
    //Stop horizontal movement
    hspeed = 0;
}

//If the player is moving up.
if (vspeed &lt; 0) {

    //Collision with a ceiling
    if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,0,0)) {
    
        //Check if there's a bumpable block on the way and bump it if so.
        var block = collision_rectangle(bbox_left,bbox_top-2,bbox_right,bbox_top,obj_blockparent,0,0);
        
        //If the block does exist, bump it if it has not been bumped yet.
        if (block) 
        &amp;&amp; (block.ready == 0) {
        
            //With block
            with (block) {
            
                //Block is hit
                ready = 1;
                
                //Set the vertical speed
                vspeed = -1;
                alarm[0] = 8;
                
                //Perform specified events
                event_user(0);
            }
        }
        
        //Prevent the player from getting embed in the ceiling.
        if (state &gt; 2) 
        || (statedelay &gt; 0) {
        
            while (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_solid,0,0))
                y++;
        }
        
        //Stop vertical movement
        vspeed = 0;
        
        //If the player is not climbing
        if (state = 2)
        &amp;&amp; (state != 3) {
        
            //Do not allow variable jumping
            jumping = 2;
            
            //Play 'Bump' sound
            if (!audio_is_playing(snd_bump))
            &amp;&amp; (!audio_is_playing(snd_bump_8bit))
                scr_playsound(snd_bump,snd_bump_8bit, 0, false);
        }
    }
    
    //Collision with a hidden block
    else {
    
        //Check if there's a hidden block on the way and bump it if so.
        var hidden = collision_rectangle(x,bbox_top-2,x,bbox_top,obj_qblock_hidden,0,0);
        
        //If the hidden block exists
        if (hidden)
        &amp;&amp; (bbox_top &gt; hidden.bbox_bottom+vspeed)
            with (hidden) event_user(0);
    }
}

//If the player is not climbing
if (state != 3) {

    //If the player's controls are not disabled and it's not jumping.
    if (state != 2)
    &amp;&amp; (!disablecontrol) {
    
        //Make the player crouch down when the 'Down' key is held.
        if (keyboard_check(vk_down))
        &amp;&amp; (!duck)
            duck = true;
            
        //Otherwise, if the 'Down' key is no longer pressed
        else if (!keyboard_check(vk_down))
        &amp;&amp; (duck) {
        
            //Make the player get up
            duck = false;
            
            //Check if there's a ceiling above the player and make him move until it's not embed in a solid
            if (global.powerup != cs_small)
            &amp;&amp; (collision_rectangle(bbox_left,bbox_top-16,bbox_right,bbox_top-16,obj_solid,0,0))
                inwall = true;
        }            
    }
    
    //Handles fire flower projectiles
    if (global.powerup == cs_fire) {
    
        if (keyboard_check_pressed(vk_control))
        &amp;&amp; (!duck)
        &amp;&amp; (!obj_levelmanager.barrier) {
            
            //Check if there's less than 2 fireballs on the view.
            if (instance_number(obj_fireball) &lt; 2) {
            
                //Set firing animation
                firing = 9;
                
                //Throw a fireball
                with (instance_create(x,y,obj_fireball)) {
                
                    vspeed = 2.5;
                    hspeed = 4*other.xscale;
                }
            }
        }
    }
}
else {

    //Make the player get up
    duck = false;
}

//Check for a nearby swimming surface
var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0);

//If the player is not swimming and makes contact with a water surface
if (!swimming) 
&amp;&amp; (water) {

    //Create a splash effect
    with (instance_create(x-8,water.y,obj_smoke)) {
    
        //Set the sprite
        sprite_index = spr_smoke_splash;
        
        //Set the animation speed
        image_speed = 0.2;
        
        //Set the vertical speed
        vspeed = -2;
        gravity = 0.1;
    }
        
    //Make the player swim.
    swimming = true;
    
    //Make the player get up
    duck = false;
    
    //Stop horizontal movement
    hspeed = 0;
    
    //Stop vertical movement
    gravity = 0;
    if (vspeed &gt; 0)
        vspeed = 0;
}

//Otherwise, if the player had enough swimming and wants to get out
else if (swimming) 
&amp;&amp; (!water) {

    //If there's not water above and there's not a solid on the way out
    if (!collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top-1,obj_solid,0,0)) {
    
        //If the player is moving up
        if ((state == 2) &amp;&amp; (vspeed &lt; 0)) {
        
            //If 'Shift' is held
            if (keyboard_check(vk_shift)) {
            
                //Create a splash effect.
                with (instance_create(x-8,y-1,obj_smoke)) {
                
                    //Set the sprite
                    sprite_index = spr_smoke_splash;
                    
                    //Set the animation speed
                    image_speed = 0.2;
                    
                    //Set the vertical speed
                    vspeed = -2;
                    gravity = 0.1;
                }
                
                //Make the player not swim
                swimming = false;
                
                //Allow variable jump
                jumping = 1;
                
                //Set the vertical speed
                vspeed = -3.4675;
            }
            
            //Otherwise, if 'Shift' is not held.
            else {
            
                //If the player is moving up.
                if (vspeed &lt; 0)
                    vspeed = 0;
            }
        }
    }
}

//Free the player is he is stuck on a solid.
if (state &lt;= 1) 
&amp;&amp; (!duck) 
&amp;&amp; (!inwall) {

    //Check for a nearby solid block
    var stuck = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,1);
    
    //If the player is embed on a wall
    if (stuck) {
    
        //If the player is colliding with a left or right modifier
        if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_left,0,0))
        &amp;&amp; (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_right,0,0)) {
        
            //If the player is facing right
            if (xscale == 1) {
            
                //If the player's horizontal speed is equal/greater than 0
                if (hspeed &gt;= 0) {
            
                    //Move the player to safety
                    inwall = true;
                    
                    //Set the direction to move
                    direct = -1;
                }
                
                //Otherwise, if the player's horizontal speed is lower than 0
                else if (hspeed &lt; 0) {
                
                    //Move the player to safety
                    inwall = true;
                    
                    //Set the direction to move
                    direct = 1;                
                }
            }
            
            //Otherwise, if the player is facing left
            else if (xscale == -1) {
            
                //If the player's horizontal speed if equal/lower than 0.
                if (hspeed &lt;= 0) {
            
                    //Move the player to safety
                    inwall = true;
                    
                    //Set the direction to move
                    direct = 1;
                }
                
                //Otherwise, if the player's horizontal speed if greater than 0
                else if (hspeed &gt; 0) {
                
                    //Move the player to safety
                    inwall = true;
                    
                    //Set the direction to move
                    direct = -1;                
                }           
            }
        }
        
        //Otherwise, if the player is overlapping an left modifier
        else if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_left,0,0)) {
        
            //Move the player to safety
            inwall = true;
            
            //Set the direction to move
            direct = -1;              
        }
        
        //Otherwise, if the player is overlapping an right modifier
        else if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_right,0,0)) {
        
            //Move the player to safety
            inwall = true;
            
            //Set the direction to move
            direct = 1;              
        }
    }
}

//Otherwise, if the player gets stuck on a wall
else if (inwall) {

    //Move the player until it's not embed in a wall
    x += 1*sign(direct);
    
    //If the player is not longer embed on a wall, make him able to move
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,1,0))
        inwall = false;
}

//If the player is not in contact with water.
if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_swim,1,1)) {

    //If the player is swimming.
    if (swimming)  
        swimming = false;
}

//Prevent the player from going too high on the level
if (y &lt; -96) {

    if (inair == false)
        y = -96;
}
    
//Otherwise, if he is falling.
else {

    //If the player has been launched with a trampoline.
    if (inair) {
    
        if (y &gt; -96)
        &amp;&amp; (vspeed &gt; 0)
            inair = false;
    }

    //Make the player die if he falls on a pit.
    if (bbox_top &gt; room_height+32)
    &amp;&amp; (!instance_exists(obj_nondeathpit)) {
        
        instance_create(x,y,obj_player_dead);
        instance_destroy();
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update the player's palette

//Wrap around the palette to change up the player's colours
pal = scr_wrap(isflashing,0,scr_pal_swap_get_pal_count(pal_sprite)-1);

//Set up the palette to be used.
switch (global.powerup) {

    //Fire
    case (cs_fire): {
    
        //If the player is playing as Mario
        if (global.player == 0)
            pal_sprite = spr_palette_mario_fire;
        else
            pal_sprite = spr_palette_luigi_fire;
    } break;
    
    //Default
    default: {
    
        //If the player is playing as Mario
        if (global.player == 0)
            pal_sprite = spr_palette_mario;
        else
            pal_sprite = spr_palette_luigi;
    } break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario bounce

//Set the vertical speed
vspeed = -3.925;

//Move 4 pixels upwards
y = yprevious-4;

//Make the player able to stop in mid-air.
if (keyboard_check(vk_shift))
    jumping = 1;
else
    jumping = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hurt

//Check if the player is not invulnerable
if (invulnerable == false) {
    
    //If the player is small
    if (global.powerup == cs_small) {
    
        instance_create(x,y,obj_player_dead);
        instance_destroy();
        exit;
    }
    else {
    
        //Play 'Powerdown' sound
        scr_playsound(snd_powerdown, snd_powerdown_8bit, 0, false);
    
        //Set 'Small' powerup
        global.powerup = cs_small;
        
        //Create transformation object
        with (instance_create(0,0,obj_player_transform))
            sequence = 1;    
    }
    
    //Make the player invulnerable
    invulnerable = true;
    
    //Make it flash
    alarm[0] = 90;
    
    //Make it blink
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Mario

//Draw keys
scr_key_draw();

//Set the shader
if (isflashing &gt; 0) {

    scr_pal_swap_set(pal_sprite,pal);
}

//Draw Mario
draw_sprite_ext(sprite_index,-1,round(x),round(y)+1,xscale,1,0,c_white,image_alpha);

//Reset the shader
if (isflashing &gt; 0)
    shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
