<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_endmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Retry menu controller

//Current option
choice = 0;

//Hue
hue = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Retry menu logic

//If the 'Left' key is pressed.
if ((keyboard_check_pressed(vk_left)) &amp;&amp; (choice != 0)) {
    
    //Play 'Move' sound
    scr_playsound(snd_move, snd_move_8bit, 0, false);
    
    //Set choice 0
    choice = 0;
}

//Otherwise, if the 'Right' key is pressed.
else if ((keyboard_check_pressed(vk_right)) &amp;&amp; (choice != 1)) {
    
    //Play 'Move' sound
    scr_playsound(snd_move, snd_move_8bit, 0, false);
    
    //Set choice 0
    choice = 1;
}

//Otherwise, if the 'Shift' key is pressed
else if (keyboard_check_pressed(vk_shift)) {

    if (choice == 0) {
    
        //Play 'Enter stage' sound
        scr_playsound(snd_enterstage, snd_enterstage_8bit, 0, false);
        
        //Forget collected keys
        if (global.checkpoint == noone) {
        
            global.key = 0;
            global.keyget = ds_map_create();
        }
                    
        //If there's a checkpoint
        room_goto(rm_levelload);
    }
    else {
    
        //Forget checkpoint
        global.checkpoint = noone;
        
        //Forget collected keys
        if (global.checkpoint == noone) {
        
            global.key = 0;
            global.keyget = ds_map_create();
        }
        
        //Forget collected powerstar
        if (global.powerstar[global.check] &lt; 3)
            global.powerstar[global.check] = 0;        
            
        //Return to map
        scr_return();
    }  
}

//Hue shift
hue += 0.15;
if (hue &gt; 255) {

    hue -= 255;
}

//Motion
background_hspeed[0] = -0.5;
background_vspeed[0] = -0.5;

//Colour
background_blend[0] = merge_colour(c_black,make_colour_hsv(hue,255,255),0.5);

//Motion
background_hspeed[1] = 0.5;
background_vspeed[1] = 0.5;

//Colour
background_blend[1] = merge_colour(c_black,make_colour_hsv(hue,255,255),0.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw texts

//Align the text
draw_set_valign(fa_center);
draw_set_halign(fa_center);

//Colour
draw_set_colour(c_white);

//Alpha
draw_set_alpha(1);

//Font
draw_set_font(fnt_persistent);

//Question
if (global.checkpoint != noone)
    draw_text_colour_shadowed(global.gw/2,global.gh/2-16,"Wanna try this stage from the checkpoint?",c_black,c_white,1,1,0.5,1);
else
    draw_text_colour_shadowed(global.gw/2,global.gh/2-16,"Wanna try this stage again?",c_black,c_white,1,1,0.5,1);
    
//Text
if (choice == 0) {

    draw_text_colour_shadowed(global.gw/2-64,global.gh/2+16,"- YES -",c_black,make_colour_rgb(190,247,129),1,1,0.5,1);
    draw_text_colour_shadowed(global.gw/2+64,global.gh/2+16,"NO",c_black,c_white,1,1,0.5,1);
}
else if (choice == 1) {

    draw_text_colour_shadowed(global.gw/2-64,global.gh/2+16,"YES",c_black,c_white,1,1,0.5,1);
    draw_text_colour_shadowed(global.gw/2+64,global.gh/2+16,"- NO -",c_black,make_colour_rgb(250,88,88),1,1,0.5,1);    
}

//Reset align
draw_set_valign(fa_top);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
