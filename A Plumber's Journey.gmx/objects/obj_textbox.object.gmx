<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_endmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A dialogue box, write stuff on it.

//Play 'Message' sound
scr_playsound(snd_message, noone, 0, false);

//Message to display
message = "No message was set."

//Width of the box
width = 320;

//Height of the box
height = 16;

//Padding of the box
padding = 8;

//X position
tX = xstart;

//Y position
tY = ystart;

//Target
target = noone;

//Animate dialog
anim = 0;

//Whether the message is showing
showing = false;

//Pause all background
with (obj_levelmanager) event_user(1);

//Create a screenshot
back = background_create_from_surface(application_surface,0,0,room_width,room_height,0,0)

//Deactivate all instances.
instance_deactivate_all(true);

//Activate persistent object.
instance_activate_object(obj_persistent);

//Make foreground layers invisible
instance_activate_object(obj_foreground);
if (instance_number(obj_foreground) &gt; 0) {

    with (obj_foreground) {
    
        visible = false;
        event_user(0);
    }
}

//Begin text setup
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resume background / foreground movement

//Play 'Message End' sound
scr_playsound(snd_message_end, noone, 0, false);

//Resume foreground movement
if (instance_exists(obj_foreground)) {

    with (obj_foreground) {
    
        visible = 1;
        event_user(1);
    }
}

//Resume background movement
with (obj_levelmanager) event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin text wrap

//Let's set the font if we didn't did
draw_set_font(fnt_textbox);

//Format the text to the correct width
text = string(string_make_width(message,width));

//The text that should display next if it is too long
newtext = "";

//Split up the message if it is too long
event_user(0);

//The text should start displaying now
showing = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy text box

//Activate everything
instance_activate_all();

//Delete background
if (background_exists(back)) {

    background_delete(back);
}

//Clear 'Shift' key
keyboard_clear(vk_shift);

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Split up the message if it is too long

//Iterate over all the characters in the message
for (i=1; i&lt;string_length(text); i++) {

    if (string_height(string_copy(text,1,min(i+1,string_length(text)))) &gt;= height+2) {
    
        //Split off the lines after the new line to be displayed later
        newtext = string_copy(text,i+1,string_length(text)-i);
        text = string_copy(text,1,i);
        
        //Break out of the loop
        break;
    }
}

//Set the number of characters being displayed
a = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw background, textbox and text

//Draw the screenshot if it exists
if (background_exists(back)) {

    //Disable alpha blending
    draw_enable_alphablend(0);
    
    //Draw screenshot
    draw_background(back,view_xview[0],view_yview[0]);
    
    //Enable alpha blending
    draw_enable_alphablend(1);
}

//Animate
anim += 0.1;

//Set alpha
draw_set_alpha(1);

//Set colour
draw_set_colour(c_white);

//Draw speech balloon
draw_sprite(spr_hud_dialog, 0, tX, tY); //Top-Left corner
draw_sprite(spr_hud_dialog, 2, tX + width + padding, tY); //Top-Right corner
draw_sprite(spr_hud_dialog, 4, tX + width + padding, tY + height + padding); //Bottom-Right corner
draw_sprite(spr_hud_dialog, 6, tX, tY + height + padding); //Bottom-Left corner

//Draw hor. borders
for (var i=0; i&lt;width/8; i++;) {

    draw_sprite(spr_hud_dialog, 1, tX + 8 + 8*i, tY);
    draw_sprite(spr_hud_dialog, 5, tX + 8 + 8*i, tY + height + padding);
}

//Draw ver. borders
for (var j=0; j&lt;height/8; j++;) {

    draw_sprite(spr_hud_dialog, 3, tX + width + padding, tY + 8 + 8*j);
    draw_sprite(spr_hud_dialog, 7, tX, tY + 8 + 8*j);
}

//Draw fill rectangle
draw_rectangle(tX + 8, tY + 8, tX + width + padding, tY + height + padding, false);

//Draw point if target exists
if (target != noone) {

    draw_sprite(spr_hud_dialog_point, 0, tX + (width / 2) + padding, tY + height + padding + 7);
}

//Set the font if we didn't
draw_set_font(fnt_textbox);

//If the text should be displayed
if (showing) {   
    
    //Increment the number of letters that should be displayed
    if (a &lt; string_length(text)) {
    
        a++;
    }

    //Draw the text up to the number of letters that should be displayed
    draw_text_colour_shadowed(tX + padding, tY + padding, string_copy(text, 1, a), c_black, c_black, 1, 1, 0.5, 1);
    
    //Draw text end/continue arrows.
    if (a &gt;= string_length(text)) {
            
        if (newtext = "")
            draw_sprite(spr_hud_dialog_end,anim, tX + width + padding - 4, tY + height + padding - 4);
        else
            draw_sprite(spr_hud_dialog_continue,anim, tX + width + padding - 4, tY + height + padding - 4);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Advance the text

//If text is being displayed
if (showing) {

    //If the full message is not displayed yet, display it all.
    if (a &lt; string_length(text))    
        a = string_length(text)+1;
    
    //Otherwise
    else {

        //If there is more to be displayed
        if (newtext != "") {

            //Make the new text the current text
            text = newtext;
            newtext = "";

            //Split up the message if it is too long
            event_user(0);
        }

        //Otherwise, end dialog
        else 
            event_user(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
