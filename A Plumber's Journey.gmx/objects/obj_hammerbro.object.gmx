<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hammerbro</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_deactenemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A hammer throwing koopa

//How vulnerable is this enemy to various items?
hardness = 0;

//How vulnerable is this enemy to Mario?
stomp = 0;

//Facing direction
xscale = 1;

//Set the death sprite
deathsprite = spr_hammerbro;

//Palette
palette = noone;

//Scoregrade
scoregrade = 5;

//Turning scale
fakexscale = 0;

//Move
alarm[10] = 2;

//Animate
image_speed = 0.1;

//Whether can go through solid
throughsolid = 0;

//Reverse horizontal speed.
alarm[0] = 50;

//Jump upwards / downwards.
alarm[1] = 152;

//Set the throwing pose.
alarm[2] = 17;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nograv</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Detect the player and walk towards him.

if (hspeed == 0) {

    if (!instance_exists(obj_player))
    || (obj_player.x &lt; x) {
    
        hspeed = -0.4;
        xscale = -1;
        fakexscale = -1;
    }
    else {
    
        hspeed = 0.4;
        xscale = 1;
        fakexscale = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop jumping through solids

throughsolid = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump through solids

throughsolid = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Throw a hammer

//If the player does exist.
if (instance_exists(obj_player)) {

    //If the player is at the right.
    if (obj_player.x &gt; x) {
    
        ID = instance_create(x-5,y+4,obj_hammer);
        with (ID) {
            hspeed = 1;
            image_xscale = 1;
        }
    }
    
    //Otherwise, if the player is at the left.
    else if (obj_player.x &lt; x) {
    
        ID = instance_create(x+5,y+4,obj_hammer);
        with (ID) {
            hspeed = -1;
            image_xscale = -1;
        }
    }
}

//Otherwise, if it does not exist.
else {

    //If the level manager is at the right.
    if (obj_levelmanager.x &gt; x) {
    
        ID = instance_create(x-5,y+4,obj_hammer);
        with (ID) {
            hspeed = 1;
            image_xscale = 1;
        }
    }
    
    //Otherwise, if the level manager is at the left.
    else if (obj_levelmanager.x &lt; x) {
    
        ID = instance_create(x+5,y+4,obj_hammer);
        with (ID) {
            hspeed = -1;
            image_xscale = -1;
        }
    }
}

//Set the default sprite.
sprite_index = spr_hammerbro;

//Throw another hammer.
alarm[2] = 15+random(round(30));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Throw up a hammer

if (throughsolid == 0)
&amp;&amp; (sprite_index != spr_hammerbro_turn)
&amp;&amp; (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_semisolid,1,1)) {

    //Throw a hammer.
    alarm[3] = 30;
    
    //Set the throwing pose.
    sprite_index = spr_hammerbro_throw;
}
else {
    
    //Repeat the process...
    alarm[2] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump upwards / downwards

//If there's a row of blocks above and below the hammer bro.
if (collision_rectangle(bbox_left,bbox_top-40,bbox_right,bbox_top-40,obj_blockparent,0,0))
&amp;&amp; (collision_rectangle(bbox_left,bbox_bottom+8,bbox_right,bbox_bottom+8,obj_blockparent,0,0)) {

    //Set the vertical speed
    if (floor(random(50)) &lt; 25) {
    
        vspeed = -6;
        alarm[4] = 2;
        alarm[5] = 16;
    }
    else {
    
        vspeed = -2.5;
        alarm[4] = 2;
        alarm[5] = 35;
    }
}

//Otherwise, check where's the blocks and jump up or down.
else {

    //If the blocks are above
    if (collision_rectangle(bbox_left,bbox_top-40,bbox_right,bbox_top-40,obj_blockparent,0,0)) {
    
        vspeed = -6;
        alarm[4] = 2;
        alarm[5] = 16;
    }
    
    //Otherwise, if they are below
    else if (collision_rectangle(bbox_left,bbox_bottom+8,bbox_right,bbox_bottom+8,obj_blockparent,0,0)) {
    
        vspeed = -2.5;
        alarm[4] = 2;
        alarm[5] = 35;
    }
    else    
        vspeed = -2.5;
}

//Boost jump
y--;

//Gravity
gravity = 0.25;

//Jump again
alarm[1] = 150;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reverse horizontal speed

hspeed = -hspeed;
alarm[0] = 96;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hammer bro logic

//If the hammer bro is not throwing a hammer.
if (sprite_index == spr_hammerbro) {

    if (instance_exists(obj_player)) {
    
        //Handle the turning animation.
        if ((obj_player.x &gt; x) &amp;&amp; (fakexscale != 1)) {
        
            //Set the default sprite. 
            sprite_index = spr_hammerbro_turn;
            
            //Set the animation.
            image_speed = 0.2;
            image_index = 0;
            
            //Set the fake scale
            fakexscale = 1;
        }
        else if ((obj_player.x &lt; x) &amp;&amp; (fakexscale != -1)) {
        
            //Set the default sprite. 
            sprite_index = spr_hammerbro_turn;
            
            //Set the animation.
            image_speed = 0.2;
            image_index = 0;
            
            //Set the fake scale
            fakexscale = -1;
        }        
    }
    else {
    
        //Handle the turning animation.
        if ((obj_levelmanager.x &gt; x) &amp;&amp; (fakexscale != 1)) {
        
            //Set the default sprite. 
            sprite_index = spr_hammerbro_turn;
            
            //Set the animation.
            image_speed = 0.2;
            image_index = 0;
            
            //Set the fake scale
            fakexscale = 1;
        }
        else if ((obj_levelmanager.x &lt; x) &amp;&amp; (fakexscale != -1)) {
        
            //Set the default sprite. 
            sprite_index = spr_hammerbro_turn;
            
            //Set the animation.
            image_speed = 0.2;
            image_index = 0;
            
            //Set the fake scale
            fakexscale = -1;
        }            
    }
}

//Floor collision
if (throughsolid == 0)
    event_user(4);
else if (vspeed &gt; 4)
    vspeed = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player stomp script

//Exit event if player is under the effects of the starman.
if (instance_exists(obj_invincibility))
exit;

if (stomp != -1)
&amp;&amp; (other.invulnerable != -1) {

    //If the player is above the enemy and it's moving down.
    if (other.bbox_bottom &lt; bbox_top-vspeed+5) {
    
        //Stomp sequence
        if (stomp == 0) {
        
            //Play 'Stomp' sound
            scr_playsound(snd_stomp, snd_swim_8bit, 0, false);            
            
            //Prevent enemies from getting double stomped
            if (vspeed &lt; 0) {
            
                y = yprevious;
                if (other.vspeed &gt; 0)
                    other.y = other.yprevious;
            }
            
            //Make player bounce
            with (other) event_user(1);
                        
            //Points
            with (instance_create(round(bbox_left+bbox_right)/2-8,round(y),obj_points)) {
            
                if (obj_player.combo &lt; 5)
                    event_user(5+obj_player.combo);
                else
                    event_user(11);
            }
            obj_player.combo++;
            
            //Spin thump
            with (instance_create(other.x,other.bbox_bottom-8,obj_smoke)) {
            
                sprite_index = spr_spinthump;
                image_speed = 0.3;
            }
            
            //Stomp the enemy
            event_user(1);
        }
    }
    
    //Otherwise, hurt the player
    else
        with (other) event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End turning animation

if (sprite_index == spr_hammerbro_turn) {

    //Set the default sprite.
    sprite_index = spr_hammerbro;
    
    //Set the animation speed.
    image_speed = 0.1;
    
    //Set the scale of the object
    xscale = fakexscale;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
