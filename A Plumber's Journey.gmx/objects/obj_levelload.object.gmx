<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_endmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load the next level of the game.

//Animate it
anim = 0;
anim2 = 0;

//Go to the assigned level
alarm[0] = 200;

//Discard time
global.time = 0;

//Draw the level name.
levelname = global.levelname;

//Check if the level is a castle.
if (global.level == "4")
|| (global.level == "8")
    castle = 1;
else
    castle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to the assigned level

//If there's a checkpoint
if (global.checkpoint != noone)
    room_goto(global.checkpointroom);
else {

    //Check current world
    switch (global.world) {
    
        //World 1
        case ("1"): {
        
            //Check selected level of world 1
            switch (global.level) {
            
                case ("1"): room_goto(rm_enginetest); break;
                case ("2"): break;
                case ("3"): break;
                case ("4"): break;
                case ("5"): break;
                case ("6"): break;
                case ("7"): break;
                case ("8"): break;
                case ("S"): break;
                case ("E"): break;
                default:    room_goto(rm_enginetest);
            }
        } break;
        
        //World 2
        case ("2"): {
        
            //Check selected level of world 2
            switch (global.level) {
            
                case ("1"): break;
                case ("2"): break;
                case ("3"): break;
                case ("4"): break;
                case ("5"): break;
                case ("6"): break;
                case ("7"): break;
                case ("8"): break;
                case ("S"): break;
                case ("E"): break;
                default:    room_goto(rm_enginetest);
            }
        } break;
        
        //World 3
        case ("3"): {
        
            //Check selected level of world 3
            switch (global.level) {
            
                case ("1"): break;
                case ("2"): break;
                case ("3"): break;
                case ("4"): break;
                case ("5"): break;
                case ("6"): break;
                case ("7"): break;
                case ("8"): break;
                case ("S"): break;
                case ("E"): break;
                default:    room_goto(rm_enginetest);
            }
        } break;
        
        //World 4
        case ("4"): {
        
            //Check selected level of world 4
            switch (global.level) {
            
                case ("1"): break;
                case ("2"): break;
                case ("3"): break;
                case ("4"): break;
                case ("5"): break;
                case ("6"): break;
                case ("7"): break;
                case ("8"): break;
                case ("S"): break;
                case ("E"): break;
                default:    room_goto(rm_enginetest);
            }
        } break;
        
        //World 1
        case ("5"): {
        
            //Check selected level of world 5
            switch (global.level) {
            
                case ("1"): break;
                case ("2"): break;
                case ("3"): break;
                case ("4"): break;
                case ("5"): break;
                case ("6"): break;
                case ("7"): break;
                case ("8"): break;
                case ("S"): break;
                case ("E"): break;
                default:    room_goto(rm_enginetest);
            }
        } break;
        
        //World 1
        case ("6"): {
        
            //Check selected level of world 6
            switch (global.level) {
            
                case ("1"): break;
                case ("2"): break;
                case ("3"): break;
                case ("4"): break;
                case ("5"): break;
                case ("6"): break;
                case ("7"): break;
                case ("8"): break;
                case ("S"): break;
                case ("E"): break;
                default:    room_goto(rm_enginetest);
            }
        } break;
        
        //World 7
        case ("7"): {
        
            //Check selected level of world 7
            switch (global.level) {
            
                case ("1"): break;
                case ("2"): break;
                case ("3"): break;
                case ("4"): break;
                case ("5"): break;
                case ("6"): break;
                default:    room_goto(rm_enginetest);
            }
        } break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the HUD

//Animate
anim += 0.2;

//Set the font
draw_set_font(global.font_hud);

//Coins
draw_sprite_ext(spr_hud_coins,anim,view_xview[0]+5,view_yview[0]+5,1,1,0,c_white,1);
draw_text_colour(view_xview[0]+35,view_yview[0]+5,string_format(global.coins,2,0),c_white,c_white,c_white,c_white,1);

//Score
draw_text_colour(view_xview[0]+240,view_yview[0]+5,string_add_zeros(score,9),c_white,c_white,c_white,c_white,1);

//Timer
draw_sprite_ext(spr_hud_time,anim,view_xview[0]+339,view_yview[0]+5,1,1,0,c_white,1);
draw_text_colour(view_xview[0]+349,view_yview[0]+5,"---",c_white,c_white,c_white,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the name of the level, current lives and indicate the player if he's going to enter a castle.

//Animate
anim2 += 0.1;

//Draw the castle door.
if (castle) {
    
    //Draw a castle if the level is a castle type level.
    draw_sprite_ext(spr_levelloader,1,x,y,1,1,0,c_white,1);
}

//Draw the name tag.
draw_sprite_ext(spr_levelloader,0,x,y,1,1,0,c_white,1);

//Set the level name font.
draw_set_font(fnt_load);

//Align the text to the center
draw_set_halign(fa_center);

//Draw the level name.
draw_text_colour(view_xview[0]+192,view_yview[0]+31,string(levelname),c_black,c_black,c_black,c_black,1);

//Align the text to the default state.
draw_set_halign(fa_left);

//Set the regular font.
draw_set_font(global.font_hud);

//Draw Mario
if (global.player == 0)
    draw_sprite_ext(spr_levelloader_mario,anim2,158,108,1,1,0,c_white,1);
else
    draw_sprite_ext(spr_levelloader_luigi,anim2,158,108,1,1,0,c_white,1);

//Draw the lives
draw_text_colour(view_xview[0]+206,view_yview[0]+118,string_format(lives,2,0),c_white,c_white,c_white,c_white,1);

//Draw the current world and level
draw_text(view_xview[0]+147,view_yview[0]+88,string_upper('WORLD') + " " + string(global.world) + "-" + string(global.level));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Force start level

if (obj_persistent.done == 1)
    alarm[0] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
