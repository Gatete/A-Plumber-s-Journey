<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_small_climb</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>spr_playermask_big</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player on the flagpole

//Play the flagpole sound
scr_playsound(snd_flagpole, snd_flagpole_8bit, 0, false);

//Create keys
scr_key_init();

//Stop both music and timer
with (obj_levelmanager) {

    event_user(3);
    alarm[2] = 0;
}

//Clear the level
global.clear = 1;

//Forget check points
global.checkpoint = noone;

//State
ready = 0;

//Stream
stream = -1;

//Animate
image_speed = 0.15;

//Use the goal sprite
sprite_index = scr_player_climb()

//Use small mask for small Mario
if (global.powerup = cs_small) {

    mask_index = spr_playermask;
}

//Move down
vspeed = 1.5;

//Start walking
alarm[0] = 112;

//Keep the collected powerstar forever
if (global.powerstar[global.check] &gt; 0)
    global.powerstar[global.check] = 3;

//Get number of fireworks
if (global.time -(floor(global.time/10)*10) == 6)
    global.fireworks = 6;
else if (global.time -(floor(global.time/10)*10) == 3)
    global.fireworks = 3;
else if (global.time -(floor(global.time/10)*10) == 1)
    global.fireworks = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nograv</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to the map after the music is done playing.

if (!FMODInstanceIsPlaying(stream)) {

    if (global.fireworks == 0)  
        scr_return();
    
    else {
    
        if (global.fireworks &gt; 1) {
        
            //Spawn a firework
            instance_create(view_xview[0]+random_range(32,336),view_yview[0]+random_range(32,64),obj_firework_spawner);
              
            //Decrease amount of firework
            global.fireworks--;
            
            //Repeat
            alarm[2] = 30;
        }
        else {
        
        
            //Spawn a firework
            instance_create(view_xview[0]+random_range(32,336),view_yview[0]+random_range(32,64),obj_firework_spawner);
              
            //Decrease amount of firework
            global.fireworks = 0;
            
            //Repeat
            alarm[2] = 120;        
        }
    }
}
else
    alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take points off the time, and add to the score

//If there is no time left
if (global.time == 0) {

    //If the 8-bit sound mode is selected
    if (obj_persistent.soundmode == 1) {
    
        if (audio_is_playing(snd_countdown_8bit))
            audio_stop_sound(snd_countdown_8bit);
    }
    
    //Otherwise
    else {
    
        if (audio_is_playing(snd_countdown)) {
        
            //Stop count down sound
            audio_stop_sound(snd_countdown);
            
            //Play count end sound
            audio_play_sound(snd_countdown_end, 0, false);
        }
    }
    
    //Create fireworks
    alarm[2] = 1;
}

//Otherwise
else {

    if (global.time &gt; 0) {
    
        //Add 50 to the score
        score += 50;
        
        //Subtract 1 second from the timer
        global.time--;
    }

    //Continue counting down
    alarm[1] = 1;   
    
    //Play the count sound
    if (obj_persistent.soundmode == 0) 
        audio_play_sound(snd_countdown, 0, false);
    else
        audio_play_sound(snd_countdown_8bit, 0, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start walking to the goal castle

//Physics state
ready = 2;

//Play the flagpole music
stream = FMODSoundPlay(global.track_flagpole, 0);

//Face right
image_xscale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Goal Mario logic

//Update keys
scr_key_update();

//Destroy all enemies
with (obj_enemyparent) {

    instance_create(bbox_left+bbox_right/2-8,bbox_top+bbox_bottom/2-8,obj_smoke)
    instance_destroy()
}

//When in the physics or countdown state
if ((ready == 2) || (ready == 3)) {

    //Prevent physics parent from destroying (Hack)
    if (bbox_top &gt; room_height) {
    
        //If it's moving to the right...
        if (ready = 2) {
        
            hspeed = -1
        }
        
        //Stay invisible on the bottom of the view
        y = room_height-32;
        visible = 0;
    }

    //Default event
    event_inherited();

    //If Mario reached a wall or fell out of the room when in the physics state
    if (ready = 2) {
    
        if (hspeed &lt; 0) {

            //Countdown state
            ready = 3;
    
            //Begin countdown state
            event_user(15);
    
            //Stop walking
            hspeed = 0;
        }
        else {
        
            //Set horizontal speed
            hspeed += 0.1;
            if (hspeed &gt; 2)
                hspeed = 2;
        }
    }
}

//Animate
event_user(13);

//Enter castle
event_user(14);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_flagpole">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When Mario reaches the bottom of the flagpole
if ((ready == 0) &amp;&amp; (y &gt; other.y+144)) {

    //Do not animate
    image_speed = 0;
    image_index = 0;

    //Stop moving
    vspeed = 0;

    //Snap to bottom of the flagpole
    y = other.y+144;

    //Ready to jump state
    ready = 1;
    
    //Face left
    image_xscale = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin countdown state

//Start the countdown if there is a time limit
if (global.time &gt; 0)
    alarm[1] = 1;
else
    alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enter castle

if (instance_exists(obj_incastle)) {
    
    if (x &gt; obj_incastle.x+8) {
    
        if (ready == 2) {
            
            //In door state
            ready = 4;
            
            //Depth
            depth = 14;
        }
        else if ((ready == 4) &amp;&amp; (x &gt; obj_incastle.x+24)) {
        
            //Snap to the castle's door
            x = obj_incastle.x+26;
            
            //Inside castle state
            ready = 5;
            
            //Stop moving
            hspeed = 0;
            
            //Begin countdown state
            event_user(15);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate

//When on flagpole
if (ready &lt; 2) {

    //Set climbing pose
    sprite_index = scr_player_climb();

    //Animate
    if (vspeed &gt; 0)
        image_speed = 0.15;
    else {
    
        image_speed = 0;
        image_index = 0;
    }
}

//When not on flagpole
else {

    //When on the ground, use walking sprite.
    if (gravity = 0) { 
    
        if (hspeed == 0) {
        
            //Set idle pose
            sprite_index = scr_player_idle();
            image_speed = 0;
            image_index = 0;
        }
        else {
        
            //Set walking pose
            sprite_index = scr_player_walk();
            
            //Animate
            image_speed = 0.065+abs(hspeed)/7.5;
        }
    }
    
    //Otherwise
    else {
    
        //Use the jump sprite
        sprite_index = scr_player_jump();
    
        //Use the correct image index
        image_index = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//Draw key
scr_key_draw();

//Draw player
draw_sprite_ext(sprite_index,-1,round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
