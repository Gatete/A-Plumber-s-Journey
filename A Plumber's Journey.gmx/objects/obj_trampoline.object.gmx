<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_trampoline</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>9</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A trampoline

//Do not animate
image_speed = 0;
image_index = 0;

//Whether Mario is on the trampoline
ready = 0;
s_ready = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow the player to use the spring again

s_ready = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player interact with the spring

//If Mario is above and moving down, use the stomp event.
if ((other.bbox_bottom &lt; bbox_top-vspeed+5) &amp;&amp; (other.vspeed &gt;= 0)) {

    //Animate
    image_speed = 0.4;
    
    //Mario logic
    with (other) {
    
        //Prevent the player from jumping
        obj_player.jumping = 2;
        
        //Force idle state
        obj_player.state = 0;
    
        //Stop horizontal speed.
        hspeed = 0;
        
        //Stop vertical speed.
        vspeed = 0;
        if (gravity &gt; 0)
            gravity = 0;
    }
    
    //Spring is ready
    ready = 1;
    s_ready = 1;
    
    //Mario logic (Part 2)
    with (other) event_user(15);
}
    
//If the player is above the spring.
if (ready) {   

    //Prevent the player from jumping
    obj_player.jumping = 2;
    
    //Force idle state
    obj_player.state = 0; 
        
    //Set y position
    obj_player.y = self.y+(image_index*4)-14;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart up animation

if (sprite_index == spr_trampoline) {

    //If the spring is about to launch the player upwards.
    if (s_ready == 1) {
    
        //If Mario does exist.
        if (instance_exists(obj_player)) {
        
            //Play spring sound.
            scr_playsound(snd_trampoline, snd_trampoline_8bit, 0, false);
            
            //Set the player vertical speed
            obj_player.vspeed = -4.925;
                        
            //Force player jump
            obj_player.state = 2;
            
            //Move up
            obj_player.y -= 8;
            
            //Check if 'Shift' is pressed.
            if (keyboard_check(vk_shift))
                obj_player.jumping = 1;
            else
                obj_player.jumping = 2;
        }
    }
    
    //Allow use
    ready = 0;
    alarm[0] = 8;
    
    //Set animation
    image_speed = 1;
    image_index = 0;
    
    //Set trampoline end sequence
    sprite_index = spr_trampoline_end;
}
else if (sprite_index == spr_trampoline_end) {

    //Set the sprite
    sprite_index = spr_trampoline;

    //Restart animation
    image_speed = 0;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
