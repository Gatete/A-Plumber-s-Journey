<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bobomb_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_enemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A "defused" bomb, are you sure it's defused

//How vulnerable is this enemy to various items?
hardness = 1;

//How vulnerable is this enemy to Mario?
stomp = 0;

//Facing direction
xscale = 1;

//Set the death sprite
deathsprite = spr_bobomb_dead;

//Palette
palette = noone;

//Scoregrade
scoregrade = 1;

//Do not animate
image_speed = 0;
image_index = 0;

//Tick
alarm[0] = 270;

//Make it able to shake before it wakes up.
offset = 0;

//Whether is about to blow up
ready = 0;

//Animation
anim = 0;

//Kick delay
delay = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nograv</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Countdown and blow up when timer hits 0

if (image_index == 0) {

    //Play a tick sound
    scr_playsound(snd_tick, noone, 0, false);

    //2 seconds left...
    image_index = 4;
    
    //Change the frame
    alarm[1] = 30;    
}
else if (image_index == 4) {

    //Play a tick sound
    scr_playsound(snd_tick, noone, 0, false);

    //RUUUUUUUUN!
    image_index = 8;
    
    //Change the frame
    alarm[1] = 30;
}
else if (image_index == 8) {

    instance_create(x,y+8,obj_explosion);
    instance_destroy();
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin timer and shake it

//Begin timer
if (!ready) {

    //Play a tick sound
    scr_playsound(snd_tick, noone, 0, false);

    //Make it explode.
    ready = 1;
    
    //Change the frame
    alarm[1] = 30;
    
    //Set the timer sprite.
    if (xscale == 1)
        sprite_index = spr_bobomb_down_timer_r;
    else {
    
        xscale = 1;
        sprite_index = spr_bobomb_down_timer_l;
    }
}

//Shake
alarm[0] = 1;
if (offset != 1)
    offset = 1;
else
    offset = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bob-omb logic

//Default wall collision
event_user(3);

//Default floor / ceiling collision
event_user(4);

//Slowdown till he stops.
if (vspeed == 0) {

    //If the collision is slippery.
    if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_slippery,0,0)) {
    
        //Slowdown Mario until he stops.
        hspeed = max(0,abs(hspeed)-0.1)*sign(hspeed);
        if ((hspeed &lt; 0.1) &amp;&amp; (hspeed &gt; -0.1))
            hspeed = 0;
    }
    else {
    
        //Slowdown Mario until he stops.
        hspeed = max(0,abs(hspeed)-0.05)*sign(hspeed);
        if ((hspeed &lt; 0.05) &amp;&amp; (hspeed &gt; -0.05))
            hspeed = 0;            
    }
}

//Animate the bomb
if (ready == 0) {

    anim += 0.1;
    if (anim &gt; 3.9)
        anim = 0;
}
else {

    anim += 0.3;
    if (anim &gt; 3.9)
        anim = 0;
}

//Decrement delay
if (delay &gt; 0)
    delay--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_blockparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with a bumped block

//If moving up
if ((other.vspeed &lt; 0) &amp;&amp; (other.y &lt; y-11)) {

    //Set the vertical speed
    vspeed = -4;
    
    //If the block is at the left
    if (bbox_left+bbox_right/2 &gt; other.bbox_left+other.bbox_right/2) {
    
        //Move to the right
        hspeed = 1;
        
        //If the bomb is not counting down
        if (!ready)
            xscale = 1;
        else {
        
            xscale = 1;
            sprite_index = spr_bobomb_down_timer_r;
        }
    }
    
    //Otherwise
    else {
    
        //Move to the left
        hspeed = -1;
        
        //If the bomb is not counting down
        if (!ready)
            xscale = -1;
        else {
        
            xscale = 1;
            sprite_index = spr_bobomb_down_timer_l;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kick it

//If the player is invincible, deny this event
if (instance_exists(obj_invincibility))
exit;

if (delay == 0) {

    //Play 'Kick' sound
    scr_playsound(snd_kick, snd_kick_8bit, 0, false);
    
    //Set the vertical speed
    vspeed = -2;
    
    //Set delay
    delay = 8;
    
    //If the player is at the left.
    if (other.x &lt; x) {
    
        //Move to the right.
        hspeed = 2.7;
        
        //If the bomb is not counting down.
        if (ready == 0)
            xscale = 1;
            
        //Otherwise, set a different sprite
        else {
        
            xscale = 1;
            sprite_index = spr_bobomb_down_timer_r;    
        }
    }
    
    //Otherwise, do the opposite thing.
    else if (other.x &gt; x) {
    
        //Move to the right.
        hspeed = -2.7;
        
        //If the bomb is not counting down.
        if (ready == 0)
            xscale = -1;
            
        //Otherwise, set a different sprite
        else {
        
            xscale = 1;
            sprite_index = spr_bobomb_down_timer_l;    
        }    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw bob-omb

draw_sprite_ext(sprite_index,image_index+anim,round(x)+offset,round(y)+1,xscale,1,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
